--- a/src/plugin.rs
+++ b/src/plugin.rs
@@ -1,9 +1,7 @@
-use std::env;
-
+use crate::highlight::Highlighter;
 use nu_plugin::{EvaluatedCall, LabeledError, Plugin};
 use nu_protocol::{Category, PluginExample, PluginSignature, Spanned, SyntaxShape, Type, Value};
-
-use crate::highlight::Highlighter;
+use std::env;
 
 const THEME_ENV: &str = "NU_PLUGIN_HIGHLIGHT_THEME";
 const TRUE_COLORS_ENV: &str = "NU_PLUGIN_HIGHLIGHT_TRUE_COLORS";
@@ -25,13 +23,13 @@ impl Plugin for HighlightPlugin {
             .optional(
                 "language",
                 SyntaxShape::String,
-                "language or file extension to help language detection"
+                "language or file extension to help language detection",
             )
             .named(
                 "theme",
                 SyntaxShape::String,
                 "theme used for highlighting",
-                Some('t')
+                Some('t'),
             )
             .switch("list-themes", "list all possible themes", None)
             .category(Category::Strings)
@@ -49,26 +47,26 @@ impl Plugin for HighlightPlugin {
                         (String::from("name"), Type::String),
                         (String::from("author"), Type::String),
                         (String::from("default"), Type::Bool),
-                    ])
+                    ]),
                 ),
             ])
             .plugin_examples(
                 (vec![
                     (
                         "Highlight a toml file by its file extension",
-                        "open Cargo.toml -r | highlight toml"
+                        "open Cargo.toml -r | highlight toml",
                     ),
                     (
                         "Highlight a rust file by programming language",
-                        "open src/main.rs | highlight Rust"
+                        "open src/main.rs | highlight Rust",
                     ),
                     (
                         "Highlight a bash script by inferring the language (needs shebang)",
-                        "open example.sh | highlight"
+                        "open example.sh | highlight",
                     ),
                     (
                         "Highlight a toml file with another theme",
-                        "open Cargo.toml -r | highlight toml -t ansi"
+                        "open Cargo.toml -r | highlight toml -t ansi",
                     ),
                     ("List all available themes", "highlight --list-themes"),
                 ])
@@ -76,9 +74,9 @@ impl Plugin for HighlightPlugin {
                 .map(|(description, example)| PluginExample {
                     example: example.to_owned(),
                     description: description.to_owned(),
-                    result: None
+                    result: None,
                 })
-                .collect()
+                .collect(),
             )]
     }
 
@@ -86,7 +84,7 @@ impl Plugin for HighlightPlugin {
         &mut self,
         name: &str,
         call: &EvaluatedCall,
-        input: &Value
+        input: &Value,
     ) -> Result<Value, LabeledError> {
         assert_eq!(name, "highlight");
         let highlighter = Highlighter::new();
@@ -95,22 +93,26 @@ impl Plugin for HighlightPlugin {
         if call.has_flag("list-themes") {
             return Ok(highlighter.list_themes().into());
         }
-
+        let theme_name = call.get_flag_value("theme");
+        let theme_span = match &theme_name {
+            Some(t) => t.span(),
+            None => call.head,
+        };
         // use theme from environment variable if available, override with passed
-        let theme = match (call.get_flag_value("theme"), env::var(THEME_ENV).ok()) {
+        let theme = match (theme_name, env::var(THEME_ENV).ok()) {
             (Some(Value::String { val, .. }), _) if highlighter.is_valid_theme(&val) => Some(val),
-            (Some(Value::String { span, .. }), _) => {
+            (Some(Value::String { .. }), _) => {
                 return Err(LabeledError {
                     label: "Unknown theme, use `highlight --list-themes` to list all themes".into(),
                     msg: "unknown theme".into(),
-                    span: Some(span)
+                    span: Some(theme_span),
                 })
             }
             (Some(v), _) => {
                 return Err(LabeledError {
                     label: "Expected theme value to be a string".into(),
                     msg: format!("expected string, got {}", v.get_type()),
-                    span: Some(v.expect_span())
+                    span: Some(v.span()),
                 })
             }
             (_, Some(t)) if highlighter.is_valid_theme(&t) => Some(t),
@@ -118,10 +120,10 @@ impl Plugin for HighlightPlugin {
                 return Err(LabeledError {
                     label: format!("Unknown theme \"{}\"", t),
                     msg: "use `highlight --list-themes` to list all themes".into(),
-                    span: None
+                    span: None,
                 })
             }
-            _ => None
+            _ => None,
         };
 
         // check whether to use true colors from env variable, default to true
@@ -136,8 +138,8 @@ impl Plugin for HighlightPlugin {
                         "consider unsetting $env.{} or set it to \"true\" or \"false\"",
                         TRUE_COLORS_ENV
                     ),
-                    span: None
-                })
+                    span: None,
+                }),
             })
             .unwrap_or(Ok(true))?;
 
@@ -149,13 +151,13 @@ impl Plugin for HighlightPlugin {
         let ret_val = match input {
             Value::String { val, .. } => Value::string(
                 highlighter.highlight(val, &language, &theme, true_colors),
-                call.head
+                call.head,
             ),
             v => {
                 return Err(LabeledError {
                     label: "Expected source code as string from pipeline".into(),
                     msg: format!("expected string, got {}", v.get_type()),
-                    span: Some(call.head)
+                    span: Some(call.head),
                 });
             }
         };
--- a/src/theme.rs
+++ b/src/theme.rs
@@ -1,11 +1,11 @@
-use nu_protocol::{Span, Value};
+use nu_protocol::{record, Span, Value};
 
 /// Description of a theme.
 pub struct ThemeDescription {
     pub id: String,
     pub name: Option<String>,
     pub author: Option<String>,
-    pub default: bool
+    pub default: bool,
 }
 
 /// List of theme descriptions.
@@ -17,28 +17,23 @@ impl From<ThemeDescription> for Value {
             id,
             name,
             author,
-            default
+            default,
         } = value;
         Value::record(
-            vec![
-                String::from("id"),
-                String::from("name"),
-                String::from("author"),
-                String::from("default"),
-            ],
-            vec![
-                Value::string(id, Span::unknown()),
-                match name {
+            record! {
+                "id" => Value::string(id, Span::unknown()),
+                "name" => match name {
                     Some(name) => Value::string(name, Span::unknown()),
-                    None => Value::nothing(Span::unknown())
+                    None => Value::nothing(Span::unknown()),
+
                 },
-                match author {
+                "author" => match author {
                     Some(author) => Value::string(author, Span::unknown()),
-                    None => Value::nothing(Span::unknown())
+                    None => Value::nothing(Span::unknown()),
                 },
-                Value::bool(default, Span::unknown()),
-            ],
-            Span::unknown()
+                "default" => Value::bool(default, Span::unknown()),
+            },
+            Span::unknown(),
         )
     }
 }
@@ -47,7 +42,7 @@ impl From<ListThemes> for Value {
     fn from(value: ListThemes) -> Self {
         Value::list(
             value.0.into_iter().map(Value::from).collect(),
-            Span::unknown()
+            Span::unknown(),
         )
     }
 }
