--- a/src/sandbox/mod.rs
+++ b/src/sandbox/mod.rs
@@ -10,14 +10,14 @@ use nix::unistd::{getgroups, setgroups};
 
 pub mod config;
 #[cfg(target_os="linux")]
-pub mod seccomp;
+//pub mod seccomp;
 
 pub fn activate_stage1(disable_seccomp: bool) -> Result<()> {
     if disable_seccomp {
         warn!("DANGER: seccomp sandbox is disabled, please report bugs at https://github.com/kpcyrd/sniffglue/issues if seccomp is causing issues");
     } else {
         #[cfg(target_os="linux")]
-        seccomp::activate_stage1()?;
+        warn!("INFO: seccomp sandbox is disabled");
     }
 
     info!("stage 1/2 is active");
@@ -139,7 +139,7 @@ pub fn activate_stage2(disable_seccomp:
 
     if !disable_seccomp {
         #[cfg(target_os="linux")]
-        seccomp::activate_stage2()?;
+        warn!("INFO: seccomp sandbox is disabled");
     }
 
     info!("stage 2/2 is active");
--- a/src/sandbox/seccomp.rs
+++ b/src/sandbox/seccomp.rs
@@ -104,7 +104,7 @@ pub fn activate_stage1() -> Result<()> {
     ctx.allow_syscall(Syscall::openat)?;
     #[cfg(any(target_arch = "x86_64", target_arch = "aarch64", target_arch = "riscv64"))]
     ctx.allow_syscall(Syscall::newfstatat)?;
-    ctx.allow_syscall(Syscall::seccomp)?; // needed for stage2
+//    ctx.allow_syscall(Syscall::seccomp)?; // needed for stage2
     ctx.allow_syscall(Syscall::getrandom)?;
     #[cfg(not(any(target_arch = "aarch64", target_arch = "riscv64")))]
     ctx.allow_syscall(Syscall::pipe)?; // used in libpcap
