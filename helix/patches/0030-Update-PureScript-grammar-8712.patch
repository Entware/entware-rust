From a98ad137f9b0678ce9770aaa56a8bf8ca7c51d17 Mon Sep 17 00:00:00 2001
From: postsolar <120750161+postsolar@users.noreply.github.com>
Date: Sun, 5 Nov 2023 15:16:25 +0200
Subject: [PATCH 030/188] Update PureScript grammar (#8712)

---
 languages.toml                            |  2 +-
 runtime/queries/purescript/highlights.scm | 38 ++++++++++++++++++-----
 2 files changed, 32 insertions(+), 8 deletions(-)

--- a/languages.toml
+++ b/languages.toml
@@ -1142,7 +1142,7 @@ formatter = { command = "purs-tidy", arg
 
 [[grammar]]
 name = "purescript"
-source = { git = "https://github.com/maskhjarna/tree-sitter-purescript", rev = "0e36a885a941078bf40e559026be425764dc27bf" }
+source = { git = "https://github.com/postsolar/tree-sitter-purescript", rev = "593193b9bf0f46d5eee708a4e53044d2a9054897" }
 
 [[language]]
 name = "zig"
--- a/runtime/queries/purescript/highlights.scm
+++ b/runtime/queries/purescript/highlights.scm
@@ -3,15 +3,13 @@
 
  (integer) @constant.numeric.integer
  (exp_negation) @constant.numeric.integer
- (exp_literal (float)) @constant.numeric.float
+ (exp_literal (number)) @constant.numeric.float
  (char) @constant.character
  [
    (string)
    (triple_quote_string)
  ] @string
 
- (con_unit) @constant.builtin ; unit, as in ()
-
  (comment) @comment
 
 
@@ -36,6 +34,10 @@
 ; ----------------------------------------------------------------------------
 ; Keywords, operators, includes
 
+ ; This needs to come before the other "else" in
+ ; order to be highlighted correctly
+ (class_instance "else" @keyword)
+
  [
    "if"
    "then"
@@ -53,15 +55,20 @@
    (operator)
    (constructor_operator)
    (type_operator)
-   (tycon_arrow)
    (qualified_module)  ; grabs the `.` (dot), ex: import System.IO
    (all_names)
+
+   ; `_` wildcards in if-then-else and case-of expressions,
+   ; as well as record updates and operator sections
+   (wildcard)
    "="
    "|"
    "::"
    "∷"
    "=>"
    "⇒"
+   "<="
+   "⇐"
    "->"
    "→"
    "<-"
@@ -89,6 +96,7 @@
    "newtype"
    "type"
    "as"
+   "hiding"
    "do"
    "ado"
    "forall"
@@ -98,24 +106,40 @@
    "infixr"
  ] @keyword
 
+ (type_role_declaration
+   "role" @keyword
+   role: (type_role) @keyword)
+
+ (hole) @label
 
 ; ----------------------------------------------------------------------------
 ; Functions and variables
 
+ (row_field (field_name) @variable.other.member)
+ (record_field (field_name) @variable.other.member)
+ (record_accessor (variable) @variable.other.member)
+ (exp_record_access (variable) @variable.other.member)
+
  (signature name: (variable) @type)
  (function name: (variable) @function)
+ (class_instance (instance_name) @function)
+ (derive_declaration (instance_name) @function)
 
  ; true or false
 ((variable) @constant.builtin.boolean
  (#match? @constant.builtin.boolean "^(true|false)$"))
 
- (variable) @variable
+ ; The former one works for `tree-sitter highlight` but not in Helix/Kakoune.
+ ; The latter two work in Helix (but not Kakoune) and are a good compromise between not highlighting anything at all
+ ; as an operator and leaving it to the child nodes, and highlighting everything as an operator.
+ (exp_ticked (_) @operator)
+ (exp_ticked (exp_name (variable) @operator))
+ (exp_ticked (exp_name (qualified_variable (variable) @operator)))
 
- (exp_infix (variable) @operator)  ; consider infix functions as operators
+ (variable) @variable
 
  ("@" @namespace)  ; "as" pattern operator, e.g. x@Constructor
 
-
 ; ----------------------------------------------------------------------------
 ; Types
 
