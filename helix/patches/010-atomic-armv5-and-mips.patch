--- a/helix-dap/src/client.rs
+++ b/helix-dap/src/client.rs
@@ -8,6 +8,8 @@ use helix_core::syntax::DebuggerQuirks;
 
 use serde_json::Value;
 
+use std::convert::TryInto;
+
 use anyhow::anyhow;
 pub use log::{error, info};
 use std::{
@@ -16,7 +18,7 @@ use std::{
     net::{IpAddr, Ipv4Addr, SocketAddr},
     path::PathBuf,
     process::Stdio,
-    sync::atomic::{AtomicU64, Ordering},
+    sync::atomic::{AtomicUsize, Ordering},
 };
 use tokio::{
     io::{AsyncBufRead, AsyncWrite, BufReader, BufWriter},
@@ -31,7 +33,7 @@ pub struct Client {
     id: usize,
     _process: Option<Child>,
     server_tx: UnboundedSender<Payload>,
-    request_counter: AtomicU64,
+    request_counter: AtomicUsize,
     connection_type: Option<ConnectionType>,
     starting_request_args: Option<Value>,
     pub caps: Option<DebuggerCapabilities>,
@@ -85,7 +87,7 @@ impl Client {
             id,
             _process: process,
             server_tx,
-            request_counter: AtomicU64::new(0),
+            request_counter: AtomicUsize::new(0),
             caps: None,
             connection_type: None,
             starting_request_args: None,
@@ -226,7 +228,7 @@ impl Client {
     }
 
     fn next_request_id(&self) -> u64 {
-        self.request_counter.fetch_add(1, Ordering::Relaxed)
+        self.request_counter.fetch_add(1, Ordering::Relaxed).try_into().unwrap()
     }
 
     // Internal, called by specific DAP commands when resuming
--- a/helix-lsp/src/client.rs
+++ b/helix-lsp/src/client.rs
@@ -14,10 +14,11 @@ use lsp_types as lsp;
 use parking_lot::Mutex;
 use serde::Deserialize;
 use serde_json::Value;
+use std::convert::TryInto;
 use std::future::Future;
 use std::process::Stdio;
 use std::sync::{
-    atomic::{AtomicU64, Ordering},
+    atomic::{AtomicUsize, Ordering},
     Arc,
 };
 use std::{collections::HashMap, path::PathBuf};
@@ -46,7 +47,7 @@ pub struct Client {
     id: usize,
     _process: Child,
     server_tx: UnboundedSender<Payload>,
-    request_counter: AtomicU64,
+    request_counter: AtomicUsize,
     pub(crate) capabilities: OnceCell<lsp::ServerCapabilities>,
     config: Option<Value>,
     root_path: std::path::PathBuf,
@@ -225,7 +226,7 @@ impl Client {
             id,
             _process: process,
             server_tx,
-            request_counter: AtomicU64::new(0),
+            request_counter: AtomicUsize::new(0),
             capabilities: OnceCell::new(),
             config,
             req_timeout,
@@ -244,7 +245,7 @@ impl Client {
 
     fn next_request_id(&self) -> jsonrpc::Id {
         let id = self.request_counter.fetch_add(1, Ordering::Relaxed);
-        jsonrpc::Id::Num(id)
+        jsonrpc::Id::Num(id.try_into().unwrap())
     }
 
     fn value_into_params(value: Value) -> jsonrpc::Params {
