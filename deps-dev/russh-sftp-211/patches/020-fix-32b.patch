--- a/src/client/rawsession.rs
+++ b/src/client/rawsession.rs
@@ -2,7 +2,7 @@ use bytes::Bytes;
 use flurry::HashMap;
 use std::{
     sync::{
-        atomic::{AtomicU32, AtomicU64, Ordering},
+        atomic::{AtomicU32, AtomicUsize, Ordering},
         Arc,
     },
     time::Duration,
@@ -139,7 +139,7 @@ pub struct RawSftpSession {
     tx: mpsc::UnboundedSender<Bytes>,
     requests: Arc<SharedRequests>,
     next_req_id: AtomicU32,
-    handles: AtomicU64,
+    handles: AtomicUsize,
     options: Options,
 }
 
@@ -178,7 +178,7 @@ impl RawSftpSession {
             tx: run(stream, inner),
             requests: req_map,
             next_req_id: AtomicU32::new(1),
-            handles: AtomicU64::new(0),
+            handles: AtomicUsize::new(0),
             options: Options {
                 timeout: RwLock::new(10),
                 limits: Arc::new(Limits::default()),
@@ -254,7 +254,7 @@ impl RawSftpSession {
             .options
             .limits
             .open_handles
-            .is_some_and(|h| self.handles.load(Ordering::SeqCst) >= h)
+            .is_some_and(|h| self.handles.load(Ordering::SeqCst) >= h.try_into().unwrap())
         {
             return Err(Error::Limited("handle limit reached".to_owned()));
         }
@@ -451,7 +451,7 @@ impl RawSftpSession {
             .options
             .limits
             .open_handles
-            .is_some_and(|h| self.handles.load(Ordering::SeqCst) >= h)
+            .is_some_and(|h| self.handles.load(Ordering::SeqCst) >= h.try_into().unwrap())
         {
             return Err(Error::Limited("Handle limit reached".to_owned()));
         }
