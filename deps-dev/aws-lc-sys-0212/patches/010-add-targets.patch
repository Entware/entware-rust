--- a/aws-lc-sys/builder/cc_builder.rs
+++ b/aws-lc-sys/builder/cc_builder.rs
@@ -6,10 +6,14 @@
 // may require modifications to the logic in this module.
 
 mod aarch64_apple_darwin;
+mod aarch64_openwrt_linux_gnu;
+mod aarch64_openwrt_linux_musl;
 mod aarch64_unknown_linux_gnu;
 mod aarch64_unknown_linux_musl;
 mod i686_unknown_linux_gnu;
 mod x86_64_apple_darwin;
+mod x86_64_openwrt_linux_gnu;
+mod x86_64_openwrt_linux_musl;
 mod x86_64_unknown_linux_gnu;
 mod x86_64_unknown_linux_musl;
 
@@ -37,9 +41,13 @@ pub(crate) struct Library {
 #[allow(non_camel_case_types)]
 enum PlatformConfig {
     aarch64_apple_darwin,
+    aarch64_openwrt_linux_gnu,
+    aarch64_openwrt_linux_musl,
     aarch64_unknown_linux_gnu,
     aarch64_unknown_linux_musl,
     x86_64_apple_darwin,
+    x86_64_openwrt_linux_gnu,
+    x86_64_openwrt_linux_musl,
     x86_64_unknown_linux_gnu,
     x86_64_unknown_linux_musl,
     i686_unknown_linux_gnu,
@@ -49,11 +57,17 @@ impl PlatformConfig {
     fn libcrypto(&self) -> Library {
         match self {
             PlatformConfig::aarch64_apple_darwin => aarch64_apple_darwin::CRYPTO_LIBRARY,
+            PlatformConfig::aarch64_openwrt_linux_gnu => aarch64_openwrt_linux_gnu::CRYPTO_LIBRARY,
+            PlatformConfig::aarch64_openwrt_linux_musl => {
+                aarch64_openwrt_linux_musl::CRYPTO_LIBRARY
+            }
             PlatformConfig::aarch64_unknown_linux_gnu => aarch64_unknown_linux_gnu::CRYPTO_LIBRARY,
             PlatformConfig::aarch64_unknown_linux_musl => {
                 aarch64_unknown_linux_musl::CRYPTO_LIBRARY
             }
             PlatformConfig::x86_64_apple_darwin => x86_64_apple_darwin::CRYPTO_LIBRARY,
+            PlatformConfig::x86_64_openwrt_linux_gnu => x86_64_openwrt_linux_gnu::CRYPTO_LIBRARY,
+            PlatformConfig::x86_64_openwrt_linux_musl => x86_64_openwrt_linux_musl::CRYPTO_LIBRARY,
             PlatformConfig::x86_64_unknown_linux_gnu => x86_64_unknown_linux_gnu::CRYPTO_LIBRARY,
             PlatformConfig::x86_64_unknown_linux_musl => x86_64_unknown_linux_musl::CRYPTO_LIBRARY,
             PlatformConfig::i686_unknown_linux_gnu => i686_unknown_linux_gnu::CRYPTO_LIBRARY,
@@ -64,9 +78,13 @@ impl PlatformConfig {
         println!("default_for Target: '{target}'");
         match target {
             "aarch64-apple-darwin" => Some(PlatformConfig::aarch64_apple_darwin),
+            "aarch64-openwrt-linux-gnu" => Some(PlatformConfig::aarch64_openwrt_linux_gnu),
+            "aarch64-openwrt-linux-musl" => Some(PlatformConfig::aarch64_openwrt_linux_musl),
             "aarch64-unknown-linux-gnu" => Some(PlatformConfig::aarch64_unknown_linux_gnu),
             "aarch64-unknown-linux-musl" => Some(PlatformConfig::aarch64_unknown_linux_musl),
             "x86_64-apple-darwin" => Some(PlatformConfig::x86_64_apple_darwin),
+            "x86_64-openwrt-linux-gnu" => Some(PlatformConfig::x86_64_openwrt_linux_gnu),
+            "x86_64-openwrt-linux-musl" => Some(PlatformConfig::x86_64_openwrt_linux_musl),
             "x86_64-unknown-linux-gnu" => Some(PlatformConfig::x86_64_unknown_linux_gnu),
             "x86_64-unknown-linux-musl" => Some(PlatformConfig::x86_64_unknown_linux_musl),
             "i686-unknown-linux-gnu" => Some(PlatformConfig::i686_unknown_linux_gnu),
--- a/aws-lc-sys/builder/main.rs
+++ b/aws-lc-sys/builder/main.rs
@@ -372,12 +372,16 @@ fn initialize() {
         let target = target();
         let supported_platform = match target.as_str() {
             "aarch64-apple-darwin"
+            | "aarch64-openwrt-linux-gnu"
+            | "aarch64-openwrt-linux-musl"
             | "aarch64-pc-windows-msvc"
             | "aarch64-unknown-linux-gnu"
             | "aarch64-unknown-linux-musl"
             | "i686-pc-windows-msvc"
             | "i686-unknown-linux-gnu"
             | "x86_64-apple-darwin"
+            | "x86_64-openwrt-linux-gnu"
+            | "x86_64-openwrt-linux-musl"
             | "x86_64-pc-windows-gnu"
             | "x86_64-pc-windows-msvc"
             | "x86_64-unknown-linux-gnu"
@@ -463,12 +467,16 @@ fn prepare_cargo_cfg() {
     /*
     println!("cargo::rustc-check-cfg=cfg(use_bindgen_generated)");
     println!("cargo::rustc-check-cfg=cfg(aarch64_apple_darwin)");
+    println!("cargo::rustc-check-cfg=cfg(aarch64_openwrt_linux_gnu)");
+    println!("cargo::rustc-check-cfg=cfg(aarch64_openwrt_linux_musl)");
     println!("cargo::rustc-check-cfg=cfg(aarch64_pc_windows_msvc)");
     println!("cargo::rustc-check-cfg=cfg(aarch64_unknown_linux_gnu)");
     println!("cargo::rustc-check-cfg=cfg(aarch64_unknown_linux_musl)");
     println!("cargo::rustc-check-cfg=cfg(i686_pc_windows_msvc)");
     println!("cargo::rustc-check-cfg=cfg(i686_unknown_linux_gnu)");
     println!("cargo::rustc-check-cfg=cfg(x86_64_apple_darwin)");
+    println!("cargo::rustc-check-cfg=cfg(x86_64_openwrt_linux_gnu)");
+    println!("cargo::rustc-check-cfg=cfg(x86_64_openwrt_linux_musl)");
     println!("cargo::rustc-check-cfg=cfg(x86_64_pc-windows-gnu)");
     println!("cargo::rustc-check-cfg=cfg(x86_64_pc_windows_msvc)");
     println!("cargo::rustc-check-cfg=cfg(x86_64_unknown_linux_gnu)");
--- a/aws-lc-sys/src/lib.rs
+++ b/aws-lc-sys/src/lib.rs
@@ -25,11 +25,15 @@ macro_rules! platform_binding {
 
 platform_binding!(aarch64_apple_darwin);
 platform_binding!(aarch64_pc_windows_msvc);
+platform_binding!(aarch64_openwrt_linux_gnu);
+platform_binding!(aarch64_openwrt_linux_musl);
 platform_binding!(aarch64_unknown_linux_gnu);
 platform_binding!(aarch64_unknown_linux_musl);
 platform_binding!(i686_pc_windows_msvc);
 platform_binding!(i686_unknown_linux_gnu);
 platform_binding!(x86_64_apple_darwin);
+platform_binding!(x86_64_openwrt_linux_gnu);
+platform_binding!(x86_64_openwrt_linux_musl);
 platform_binding!(x86_64_pc_windows_gnu);
 platform_binding!(x86_64_pc_windows_msvc);
 platform_binding!(x86_64_unknown_linux_gnu);
