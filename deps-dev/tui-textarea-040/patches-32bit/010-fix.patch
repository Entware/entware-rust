--- a/src/widget.rs
+++ b/src/widget.rs
@@ -5,7 +5,7 @@ use crate::ratatui::widgets::{Paragraph,
 use crate::textarea::TextArea;
 use crate::util::num_digits;
 use std::cmp;
-use std::sync::atomic::{AtomicU64, Ordering};
+use std::sync::atomic::{AtomicUsize, Ordering};
 
 // &mut 'a (u16, u16, u16, u16) is not available since Renderer instance totally takes over the ownership of TextArea
 // instance. In the case, the TextArea instance cannot be accessed from any other objects since it is mutablly
@@ -16,12 +16,12 @@ use std::sync::atomic::{AtomicU64, Order
 // manage states of textarea instances separately.
 // https://docs.rs/tui/latest/tui/terminal/struct.Frame.html#method.render_stateful_widget
 #[derive(Default, Debug)]
-pub struct Viewport(AtomicU64);
+pub struct Viewport(AtomicUsize);
 
 impl Clone for Viewport {
     fn clone(&self) -> Self {
         let u = self.0.load(Ordering::Relaxed);
-        Viewport(AtomicU64::new(u))
+        Viewport(AtomicUsize::new(u))
     }
 }
 
@@ -33,8 +33,8 @@ impl Viewport {
 
     pub fn rect(&self) -> (u16, u16, u16, u16) {
         let u = self.0.load(Ordering::Relaxed);
-        let width = (u >> 48) as u16;
-        let height = (u >> 32) as u16;
+        let width = (u >> 16) as u16;
+        let height = (u >> 16) as u16;
         let row = (u >> 16) as u16;
         let col = u as u16;
         (row, col, width, height)
@@ -54,9 +54,9 @@ impl Viewport {
     }
 
     fn store(&self, row: u16, col: u16, width: u16, height: u16) {
-        // Pack four u16 values into one u64 value
+        // Pack four u16 values into one usize value
         let u =
-            ((width as u64) << 48) | ((height as u64) << 32) | ((row as u64) << 16) | col as u64;
+            ((width as usize) << 16) | ((height as usize) << 16) | ((row as usize) << 16) | col as usize;
         self.0.store(u, Ordering::Relaxed);
     }
 
@@ -72,7 +72,7 @@ impl Viewport {
         let u = self.0.get_mut();
         let row = apply_scroll((*u >> 16) as u16, rows);
         let col = apply_scroll(*u as u16, cols);
-        *u = (*u & 0xffff_ffff_0000_0000) | ((row as u64) << 16) | (col as u64);
+        *u = (*u & 0xffff_ffff) | ((row as usize) << 16) | (col as usize);
     }
 }
 
