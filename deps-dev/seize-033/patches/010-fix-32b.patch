--- a/src/raw.rs
+++ b/src/raw.rs
@@ -6,7 +6,7 @@ use std::cell::{Cell, UnsafeCell};
 use std::mem::ManuallyDrop;
 use std::num::NonZeroU64;
 use std::ptr::{self, NonNull};
-use std::sync::atomic::{self, AtomicPtr, AtomicU64, AtomicUsize, Ordering};
+use std::sync::atomic::{self, AtomicPtr, AtomicUsize, Ordering};
 
 // Fast, lock-free, robust concurrent memory reclamation.
 //
@@ -20,7 +20,7 @@ pub struct Collector {
     node_count: ThreadLocal<UnsafeCell<u64>>,
 
     // The global epoch value
-    pub(crate) epoch: AtomicU64,
+    pub(crate) epoch: AtomicUsize,
     // The number of node allocations before advancing the global epoch
     pub(crate) epoch_frequency: Option<NonZeroU64>,
     // The number of nodes in a batch before we free
@@ -31,7 +31,7 @@ impl Collector {
     // Create a collector with the provided configuration.
     pub fn new(threads: usize, epoch_frequency: NonZeroU64, batch_size: usize) -> Self {
         Self {
-            epoch: AtomicU64::new(1),
+            epoch: AtomicUsize::new(1),
             reservations: ThreadLocal::with_capacity(threads),
             batches: ThreadLocal::with_capacity(threads),
             node_count: ThreadLocal::with_capacity(threads),
@@ -60,7 +60,7 @@ impl Collector {
             None => 0,
         };
 
-        Node { birth_epoch }
+        Node { birth_epoch: birth_epoch.try_into().unwrap() }
     }
 
     // Mark the current thread as active.
@@ -327,7 +327,7 @@ impl Collector {
             //
             // if epoch tracking is disabled this is always false (0 < 0)
             if !ptr::eq(reservation, current_reservation)
-                && reservation.epoch.load(Ordering::Relaxed) < batch.min_epoch
+                && reservation.epoch.load(Ordering::Relaxed) < batch.min_epoch.try_into().unwrap()
             {
                 continue;
             }
@@ -501,7 +501,7 @@ struct Reservation {
     // The head of the list
     head: AtomicPtr<Entry>,
     // The epoch this thread last accessed a pointer in
-    epoch: AtomicU64,
+    epoch: AtomicUsize,
     // the number of active guards for this thread
     guards: Cell<u64>,
 }
@@ -510,7 +510,7 @@ impl Default for Reservation {
     fn default() -> Self {
         Reservation {
             head: AtomicPtr::new(Entry::INACTIVE),
-            epoch: AtomicU64::new(0),
+            epoch: AtomicUsize::new(0),
             guards: Cell::new(0),
         }
     }
