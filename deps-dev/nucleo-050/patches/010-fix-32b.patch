--- a/src/boxcar.rs
+++ b/src/boxcar.rs
@@ -24,7 +24,7 @@
 use std::alloc::Layout;
 use std::cell::UnsafeCell;
 use std::mem::MaybeUninit;
-use std::sync::atomic::{AtomicBool, AtomicPtr, AtomicU64, Ordering};
+use std::sync::atomic::{AtomicBool, AtomicPtr, AtomicUsize, Ordering};
 use std::{ptr, slice};
 
 use crate::{Item, Utf32String};
@@ -38,7 +38,7 @@ pub(crate) struct Vec<T> {
     ///
     /// this value may be more than the true length as it will
     /// be incremented before values are actually stored.
-    inflight: AtomicU64,
+    inflight: AtomicUsize,
     /// buckets of length 32, 64 .. 2^31
     buckets: [Bucket<T>; BUCKETS as usize],
     /// the number of matcher columns in this vector, its absolutely critical that
@@ -66,7 +66,7 @@ impl<T> Vec<T> {
 
         Vec {
             buckets: buckets.map(Bucket::new),
-            inflight: AtomicU64::new(0),
+            inflight: AtomicUsize::new(0),
             columns,
         }
     }
@@ -79,7 +79,7 @@ impl<T> Vec<T> {
     pub fn count(&self) -> u32 {
         self.inflight
             .load(Ordering::Acquire)
-            .min(MAX_ENTRIES as u64) as u32
+            .min((MAX_ENTRIES as u64).try_into().unwrap()) as u32
     }
 
     // Returns a reference to the element at the given index.
@@ -206,7 +206,7 @@ impl<T> Vec<T> {
         let end = self
             .inflight
             .load(Ordering::Acquire)
-            .min(MAX_ENTRIES as u64) as u32;
+            .min((MAX_ENTRIES as u64).try_into().unwrap()) as u32;
         assert!(start <= end, "index {start} is out of bounds!");
         Iter {
             location: Location::of(start),
@@ -223,7 +223,7 @@ impl<T> Vec<T> {
         let end = self
             .inflight
             .load(Ordering::Acquire)
-            .min(MAX_ENTRIES as u64) as u32;
+            .min((MAX_ENTRIES as u64).try_into().unwrap()) as u32;
         assert!(start <= end, "index {start} is out of bounds!");
 
         ParIter {
@@ -277,7 +277,7 @@ impl<'v, T> Iterator for Iter<'v, T> {
             return None;
         }
         debug_assert!(self.idx < self.end, "huh {} {}", self.idx, self.end);
-        debug_assert!(self.end as u64 <= self.vec.inflight.load(Ordering::Relaxed));
+        debug_assert!(self.end as u64 <= self.vec.inflight.load(Ordering::Relaxed).try_into().unwrap());
 
         loop {
             let entries = unsafe {
