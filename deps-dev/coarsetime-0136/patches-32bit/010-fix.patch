--- a/src/clock.rs
+++ b/src/clock.rs
@@ -4,11 +4,12 @@
 )))]
 use std::time;
 
-use std::sync::atomic::{AtomicU64, Ordering};
+use std::convert::TryInto;
+use std::sync::atomic::{AtomicUsize, Ordering};
 
 use super::Duration;
 
-static RECENT: AtomicU64 = AtomicU64::new(0);
+static RECENT: AtomicUsize = AtomicUsize::new(0);
 
 #[cfg(all(
     any(target_arch = "wasm32", target_arch = "wasm64"),
@@ -44,7 +45,7 @@ impl Clock {
     /// explicit time update
     #[inline]
     pub fn recent_since_epoch() -> UnixTimeStamp {
-        Duration::from_u64(RECENT.load(Ordering::Relaxed))
+        Duration::from_u64(RECENT.load(Ordering::Relaxed).try_into().unwrap())
     }
 
     /// Updates the cached system time.
@@ -54,14 +55,14 @@ impl Clock {
     #[inline]
     pub fn update() {
         let now = unix_ts();
-        RECENT.store(now, Ordering::Relaxed)
+        RECENT.store(now.try_into().unwrap(), Ordering::Relaxed)
     }
 
     /// Sets the cached system time to the specified timestamp.
     /// This function is intended for testing purposes only.
     /// It should not be used in production code.
     pub fn set_recent_since_epoch(recent: UnixTimeStamp) {
-        RECENT.store(recent.as_u64(), Ordering::Relaxed)
+        RECENT.store(recent.as_u64().try_into().unwrap(), Ordering::Relaxed)
     }
 }
 
--- a/src/instant.rs
+++ b/src/instant.rs
@@ -1,9 +1,10 @@
+use std::convert::TryInto;
 #[allow(unused_imports)]
 use std::mem::MaybeUninit;
 use std::ops::*;
 #[allow(unused_imports)]
 use std::ptr::*;
-use std::sync::atomic::{AtomicU64, Ordering};
+use std::sync::atomic::{AtomicUsize, Ordering};
 
 use super::duration::*;
 #[allow(unused_imports)]
@@ -18,7 +19,7 @@ use super::helpers::*;
 #[derive(Copy, Clone, Debug, Hash, Ord, Eq, PartialOrd, PartialEq)]
 pub struct Instant(u64);
 
-static RECENT: AtomicU64 = AtomicU64::new(0);
+static RECENT: AtomicUsize = AtomicUsize::new(0);
 
 #[cfg(windows)]
 extern "system" {
@@ -62,9 +63,9 @@ impl Instant {
     ///
     /// This function also updates the stored instant.
     pub fn now() -> Instant {
-        let now = Self::_now();
-        Self::_update(now);
-        Instant(now)
+        let now = Self::_now() as u32;
+        Self::_update(now.into());
+        Instant(now.into())
     }
 
     /// Returns an instant corresponding to "now" without updating the cached value.
@@ -72,8 +73,8 @@ impl Instant {
     ///
     /// `now()` is generally preferred over this function.
     pub fn now_without_cache_update() -> Instant {
-        let now = Self::_now();
-        Instant(now)
+        let now = Self::_now() as u32;
+        Instant(now.into())
     }
 
     /// Returns an instant corresponding to the latest update
@@ -89,8 +90,8 @@ impl Instant {
     /// This function should be called frequently, for example in an event loop
     /// or using an `Updater` task.
     pub fn update() {
-        let now = Self::_now();
-        Self::_update(now);
+        let now = Self::_now() as u32;
+        Self::_update(now.into());
     }
 
     /// Returns the amount of time elapsed from another instant to this one
@@ -247,14 +248,14 @@ impl Instant {
 
     #[inline]
     fn _update(now: u64) {
-        RECENT.store(now, Ordering::Relaxed)
+        RECENT.store(now.try_into().unwrap(), Ordering::Relaxed)
     }
 
     #[inline]
     fn _recent() -> u64 {
         let recent = RECENT.load(Ordering::Relaxed);
         if recent != 0 {
-            recent
+            recent.try_into().unwrap()
         } else {
             let now = Self::_now();
             Self::_update(now);
