--- a/src/date.rs
+++ b/src/date.rs
@@ -1,9 +1,10 @@
+use std::convert::TryInto;
 #[allow(unused_imports)]
 use std::mem::MaybeUninit;
 use std::ops::*;
 #[allow(unused_imports)]
 use std::ptr::*;
-use std::sync::atomic::{AtomicU64, Ordering};
+use std::sync::atomic::{AtomicUsize, Ordering};
 
 use super::duration::*;
 #[allow(unused_imports)]
@@ -13,7 +14,7 @@ use super::helpers::*;
 #[derive(Copy, Clone, Debug, Hash, Ord, Eq, PartialOrd, PartialEq)]
 pub struct Date(u64);
 
-static RECENT: AtomicU64 = AtomicU64::new(0);
+static RECENT: AtomicUsize = AtomicUsize::new(0);
 
 #[cfg(any(target_os = "macos", target_os = "freebsd"))]
 #[allow(non_camel_case_types)]
@@ -51,9 +52,9 @@ impl Date {
     ///
     /// This function also updates the stored date.
     pub fn now() -> Date {
-        let now = Self::_now();
-        Self::_update(now);
-        Date(now)
+        let now = Self::_now() as u32;
+        Self::_update(now.into());
+        Date(now.into())
     }
 
     /// Returns a date corresponding to "now" without updating the cached value.
@@ -61,8 +62,8 @@ impl Date {
     /// After this, `recent()` will still return the old date.
     /// `now()` is generally preferred over this function.
     pub fn now_without_cache_update() -> Date {
-        let now = Self::_now();
-        Date(now)
+        let now = Self::_now() as u32;
+        Date(now.into())
     }
 
     /// Returns a date corresponding to the latest update
@@ -78,8 +79,8 @@ impl Date {
     /// This function should be called frequently, for example in an event loop
     /// or using an `Updater` task.
     pub fn update() {
-        let now = Self::_now();
-        Self::_update(now);
+        let now = Self::_now() as u32;
+        Self::_update(now.into());
     }
 
     /// Returns the amount of time elapsed from another date to this one
@@ -209,14 +210,14 @@ impl Date {
 
     #[inline]
     fn _update(now: u64) {
-        RECENT.store(now, Ordering::Relaxed)
+        RECENT.store(now.try_into().unwrap(), Ordering::Relaxed)
     }
 
     #[inline]
     fn _recent() -> u64 {
         let recent = RECENT.load(Ordering::Relaxed);
         if recent != 0 {
-            recent
+            recent.try_into().unwrap()
         } else {
             let now = Self::_now();
             Self::_update(now);
--- a/src/instant.rs
+++ b/src/instant.rs
@@ -1,9 +1,10 @@
+use std::convert::TryInto;
 #[allow(unused_imports)]
 use std::mem::MaybeUninit;
 use std::ops::*;
 #[allow(unused_imports)]
 use std::ptr::*;
-use std::sync::atomic::{AtomicU64, Ordering};
+use std::sync::atomic::{AtomicUsize, Ordering};
 
 use super::duration::*;
 #[allow(unused_imports)]
@@ -17,7 +18,7 @@ use super::helpers::*;
 #[derive(Copy, Clone, Debug, Hash, Ord, Eq, PartialOrd, PartialEq)]
 pub struct Instant(u64);
 
-static RECENT: AtomicU64 = AtomicU64::new(0);
+static RECENT: AtomicUsize = AtomicUsize::new(0);
 
 #[cfg(windows)]
 extern "system" {
@@ -61,9 +62,9 @@ impl Instant {
     ///
     /// This function also updates the stored instant.
     pub fn now() -> Instant {
-        let now = Self::_now();
-        Self::_update(now);
-        Instant(now)
+        let now = Self::_now() as u32;
+        Self::_update(now.into());
+        Instant(now.into())
     }
 
     /// Returns an instant corresponding to "now" without updating the cached value.
@@ -71,8 +72,8 @@ impl Instant {
     ///
     /// `now()` is generally preferred over this function.
     pub fn now_without_cache_update() -> Instant {
-        let now = Self::_now();
-        Instant(now)
+        let now = Self::_now() as u32;
+        Instant(now.into())
     }
 
     /// Returns an instant corresponding to the latest update
@@ -88,8 +89,8 @@ impl Instant {
     /// This function should be called frequently, for example in an event loop
     /// or using an `Updater` task.
     pub fn update() {
-        let now = Self::_now();
-        Self::_update(now);
+        let now = Self::_now() as u32;
+        Self::_update(now.into());
     }
 
     /// Returns the amount of time elapsed from another instant to this one
@@ -216,14 +217,14 @@ impl Instant {
 
     #[inline]
     fn _update(now: u64) {
-        RECENT.store(now, Ordering::Relaxed)
+        RECENT.store(now.try_into().unwrap(), Ordering::Relaxed)
     }
 
     #[inline]
     fn _recent() -> u64 {
         let recent = RECENT.load(Ordering::Relaxed);
         if recent != 0 {
-            recent
+            recent.try_into().unwrap()
         } else {
             let now = Self::_now();
             Self::_update(now);
