error[E0308]: mismatched types
    --> .../udevrs-0.3.0/src/device.rs:355:47
     |
355  |                 if unsafe { libc::ioctl(sock, libc::SIOCGIFNAME, &mut ifr) } != 0 {
     |                             -----------       ^^^^^^^^^^^^^^^^^ expected `i32`, found `u32`
     |                             |
     |                             arguments to this function are incorrect
     |
...
error[E0308]: mismatched types
   --> .../udevrs-0.3.0/src/monitor.rs:780:35
    |
780 |             smsg.msg_controllen = cred_msg.len();
    |             -------------------   ^^^^^^^^^^^^^^ expected `u32`, found `usize`
    |             |
    |             expected due to the type of this binding
...
error[E0308]: mismatched types
    --> .../udevrs-0.3.0/src/monitor.rs:892:58
     |
892  |                 if unsafe { libc::poll(pfd.as_mut_ptr(), pfd_len, 0) } > 0 {
     |                             ----------                   ^^^^^^^ expected `u32`, found `u64`
     |                             |
     |                             arguments to this function are incorrect
     |
...
error[E0308]: mismatched types
   --> .../udevrs-0.3.0/src/monitor.rs:930:25
    |
930 |             msg_iovlen: iov.len(),
    |                         ^^^^^^^^^ expected `i32`, found `usize`

---

--- a/src/device.rs
+++ b/src/device.rs
@@ -352,7 +352,7 @@ impl UdevDevice {
                 let mut ifr: libc::ifreq = unsafe { mem::zeroed() };
                 ifr.ifr_ifru.ifru_ifindex = ifindex;
                 // SAFETY: all arguments are valid, pointers reference valid memory, and `SICGIFNAME` is a valid ioctl
-                if unsafe { libc::ioctl(sock, libc::SIOCGIFNAME, &mut ifr) } != 0 {
+                if unsafe { libc::ioctl(sock, libc::SIOCGIFNAME.try_into().unwrap(), &mut ifr) } != 0 {
                     let errno = io::Error::last_os_error();
                     // SAFETY: `sock` is a valid socket file descriptor returned by the kernel
                     unsafe { libc::close(sock) };
--- a/src/monitor.rs
+++ b/src/monitor.rs
@@ -777,7 +777,7 @@ impl UdevMonitor {
             smsg.msg_iov = &mut iov as *mut libc::iovec as *mut _;
             smsg.msg_iovlen = 1;
             smsg.msg_control = cred_msg.as_mut_ptr() as *mut _;
-            smsg.msg_controllen = cred_msg.len();
+            smsg.msg_controllen = cred_msg.len().try_into().unwrap();
             smsg.msg_name = &mut snl as *mut libc::sockaddr_nl as *mut _;
             smsg.msg_namelen = mem::size_of::<libc::sockaddr_nl>() as u32;
 
@@ -889,7 +889,7 @@ impl UdevMonitor {
 
                 // SAFETY: call to `poll` is safe because `pollfd` is properly initialized, and the
                 // resulting mutable pointer references valid memory.
-                if unsafe { libc::poll(pfd.as_mut_ptr(), pfd_len, 0) } > 0 {
+                if unsafe { libc::poll(pfd.as_mut_ptr(), pfd_len.try_into().unwrap(), 0) } > 0 {
                     // retry with the next device
                     Ok(())
                 } else {
@@ -927,7 +927,7 @@ impl UdevMonitor {
 
         let mut smsg = libc::msghdr {
             msg_iov: iov.as_mut_ptr() as *mut _,
-            msg_iovlen: iov.len(),
+            msg_iovlen: iov.len().try_into().unwrap(),
             msg_control: core::ptr::null_mut(),
             msg_controllen: 0,
             msg_flags: 0,
