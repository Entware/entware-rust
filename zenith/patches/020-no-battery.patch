--- a/src/metrics/mod.rs
+++ b/src/metrics/mod.rs
@@ -254,7 +254,7 @@ pub struct CPUTimeApp {
     pub started: chrono::DateTime<chrono::Local>,
     pub selected_process: Option<Box<ZProcess>>,
     pub max_pid_len: usize,
-    pub batteries: Vec<starship_battery::Battery>,
+//    pub batteries: Vec<starship_battery::Battery>,
     pub uptime: Duration,
     #[cfg(all(target_os = "linux", feature = "nvidia"))]
     pub nvml: Option<nvml::Nvml>,
@@ -341,7 +341,7 @@ impl CPUTimeApp {
             started: chrono::Local::now(),
             selected_process: None,
             max_pid_len: get_max_pid_length(),
-            batteries: vec![],
+//            batteries: vec![],
             top_pids: Top::default(),
             uptime: Duration::from_secs(0),
             gfx_devices: vec![],
@@ -397,15 +397,15 @@ impl CPUTimeApp {
         }
     }
 
-    fn get_batteries(&mut self) {
-        debug!("Updating Batteries.");
-        let manager = starship_battery::Manager::new().expect("Couldn't create battery manager");
-        self.batteries = manager
-            .batteries()
-            .expect("Couldn't get batteries")
-            .filter_map(|res| res.ok())
-            .collect();
-    }
+//    fn get_batteries(&mut self) {
+//        debug!("Updating Batteries.");
+//        let manager = starship_battery::Manager::new().expect("Couldn't create battery manager");
+//        self.batteries = manager
+//            .batteries()
+//            .expect("Couldn't get batteries")
+//            .filter_map(|res| res.ok())
+//            .collect();
+//    }
 
     async fn get_nics(&mut self) {
         debug!("Updating Network Interfaces");
@@ -816,7 +816,7 @@ impl CPUTimeApp {
         self.update_disk().await;
         self.get_platform().await;
         self.get_nics().await;
-        self.get_batteries();
+//        self.get_batteries();
         self.get_uptime().await;
         self.update_gfx_devices();
         self.update_gpu_utilization();
--- a/src/renderer/title.rs
+++ b/src/renderer/title.rs
@@ -11,9 +11,9 @@ use ratatui::style::{Color, Modifier, St
 use ratatui::text::{Line, Span};
 use ratatui::widgets::Paragraph;
 use ratatui::Frame;
-use starship_battery::units::power::watt;
-use starship_battery::units::ratio::percent;
-use starship_battery::units::time::second;
+//use starship_battery::units::power::watt;
+//use starship_battery::units::ratio::percent;
+//use starship_battery::units::time::second;
 use std::ops::Mul;
 use std::time::Duration;
 use unicode_width::UnicodeWidthStr;
@@ -43,74 +43,74 @@ fn display_time(start: DateTime<Local>,
     )
 }
 
-fn render_battery_widget(
-    batteries: &[starship_battery::Battery],
-) -> (Span<'_>, Span<'_>, Span<'_>, Span<'_>) {
-    let default_style = Style::default().bg(Color::DarkGray).fg(Color::White);
-    if !batteries.is_empty() {
-        let b: &starship_battery::Battery = batteries.get(0).expect("no battery");
-        let charge_state = match b.state() {
-            starship_battery::State::Unknown => " ",
-            starship_battery::State::Charging => "⚡︎",
-            starship_battery::State::Discharging => "🁢",
-            starship_battery::State::Empty => "🁢",
-            starship_battery::State::Full => "🁢",
-        };
-        let charge_state_color = match b.state() {
-            starship_battery::State::Charging => Color::Green,
-            starship_battery::State::Discharging => Color::Yellow,
-            starship_battery::State::Empty => Color::Red,
-            starship_battery::State::Full => Color::Green,
-            _ => Color::White,
-        };
-        let t = match b.state() {
-            starship_battery::State::Charging => match b.time_to_full() {
-                Some(t) => {
-                    let t = CDuration::from_std(Duration::from_secs(t.get::<second>() as u64))
-                        .expect("Duration out of range.");
-                    format!("{:}:{:}", t.num_hours(), t.num_minutes() % 60)
-                }
-                None => String::from(""),
-            },
-            starship_battery::State::Discharging => match b.time_to_empty() {
-                Some(t) => {
-                    let t = CDuration::from_std(Duration::from_secs(t.get::<second>() as u64))
-                        .expect("Duration out of range.");
-                    format!("{:02}:{:02}", t.num_hours(), t.num_minutes() % 60)
-                }
-                None => String::from(""),
-            },
-            _ => String::from(""),
-        };
-        let charged = b.state_of_charge().get::<percent>();
-        let charged_color = if charged > 0.75 {
-            Color::Green
-        } else if charged > 50.0 {
-            Color::Yellow
-        } else {
-            Color::Red
-        };
-        (
-            Span::styled(charge_state, default_style.fg(charge_state_color)),
-            Span::styled(
-                format!(" {:03.2}%", charged),
-                default_style.fg(charged_color),
-            ),
-            Span::styled(format!(" {:}", t), default_style),
-            Span::styled(
-                format!(" {:03.2}w", b.energy_rate().get::<watt>()),
-                default_style,
-            ),
-        )
-    } else {
-        (
-            Span::styled("", default_style),
-            Span::styled("", default_style),
-            Span::styled("", default_style),
-            Span::styled("", default_style),
-        )
-    }
-}
+//fn render_battery_widget(
+//    batteries: &[starship_battery::Battery],
+//) -> (Span<'_>, Span<'_>, Span<'_>, Span<'_>) {
+//    let default_style = Style::default().bg(Color::DarkGray).fg(Color::White);
+//    if !batteries.is_empty() {
+//        let b: &starship_battery::Battery = batteries.get(0).expect("no battery");
+//        let charge_state = match b.state() {
+//            starship_battery::State::Unknown => " ",
+//            starship_battery::State::Charging => "⚡︎",
+//            starship_battery::State::Discharging => "🁢",
+//            starship_battery::State::Empty => "🁢",
+//            starship_battery::State::Full => "🁢",
+//        };
+//        let charge_state_color = match b.state() {
+//            starship_battery::State::Charging => Color::Green,
+//            starship_battery::State::Discharging => Color::Yellow,
+//            starship_battery::State::Empty => Color::Red,
+//            starship_battery::State::Full => Color::Green,
+//            _ => Color::White,
+//        };
+//        let t = match b.state() {
+//            starship_battery::State::Charging => match b.time_to_full() {
+//                Some(t) => {
+//                    let t = CDuration::from_std(Duration::from_secs(t.get::<second>() as u64))
+//                        .expect("Duration out of range.");
+//                    format!("{:}:{:}", t.num_hours(), t.num_minutes() % 60)
+//                }
+//                None => String::from(""),
+//            },
+//            starship_battery::State::Discharging => match b.time_to_empty() {
+//                Some(t) => {
+//                    let t = CDuration::from_std(Duration::from_secs(t.get::<second>() as u64))
+//                        .expect("Duration out of range.");
+//                    format!("{:02}:{:02}", t.num_hours(), t.num_minutes() % 60)
+//                }
+//                None => String::from(""),
+//            },
+//            _ => String::from(""),
+//        };
+//        let charged = b.state_of_charge().get::<percent>();
+//        let charged_color = if charged > 0.75 {
+//            Color::Green
+//        } else if charged > 50.0 {
+//            Color::Yellow
+//        } else {
+//            Color::Red
+//        };
+//        (
+//            Span::styled(charge_state, default_style.fg(charge_state_color)),
+//            Span::styled(
+//                format!(" {:03.2}%", charged),
+//                default_style.fg(charged_color),
+//            ),
+//            Span::styled(format!(" {:}", t), default_style),
+//            Span::styled(
+//                format!(" {:03.2}w", b.energy_rate().get::<watt>()),
+//                default_style,
+//            ),
+//        )
+//    } else {
+//        (
+//            Span::styled("", default_style),
+//            Span::styled("", default_style),
+//            Span::styled("", default_style),
+//            Span::styled("", default_style),
+//        )
+//    }
+//}
 
 pub fn render_top_title_bar(
     app: &CPUTimeApp,
@@ -151,9 +151,9 @@ pub fn render_top_title_bar(
     } else {
         String::from("")
     };
-    let battery_widets = render_battery_widget(&app.batteries);
-    let battery_start = if !app.batteries.is_empty() { " [" } else { "" };
-    let battery_end = if !app.batteries.is_empty() { "]" } else { "" };
+//    let battery_widets = render_battery_widget(&app.batteries);
+//    let battery_start = if !app.batteries.is_empty() { " [" } else { "" };
+//    let battery_end = if !app.batteries.is_empty() { "]" } else { "" };
     let not_recording_warning = if app.writes_db_store() {
         ""
     } else {
@@ -170,12 +170,12 @@ pub fn render_top_title_bar(
             default_style,
         ),
         Span::styled(uptime, default_style),
-        Span::styled(battery_start, default_style),
-        battery_widets.0,
-        battery_widets.1,
-        battery_widets.2,
-        battery_widets.3,
-        Span::styled(battery_end, default_style),
+//        Span::styled(battery_start, default_style),
+//        battery_widets.0,
+//        battery_widets.1,
+//        battery_widets.2,
+//        battery_widets.3,
+//        Span::styled(battery_end, default_style),
         Span::styled(" [Showing: ", default_style),
         Span::styled(
             format!("{:} mins", hist_duration.num_minutes()),
