--- a/src/nu/mod.rs
+++ b/src/nu/mod.rs
@@ -1,36 +1,59 @@
-use nu_plugin::{EvaluatedCall, LabeledError, Plugin};
-use nu_protocol::{Category, PluginSignature, Value};
+use nu_plugin::{EngineInterface, EvaluatedCall, Plugin, PluginCommand, SimplePluginCommand};
+use nu_protocol::{Category, LabeledError, Signature, Value};
 
 use crate::PeriodicTable;
 
 impl Plugin for PeriodicTable {
-    fn signature(&self) -> Vec<PluginSignature> {
-        vec![PluginSignature::build("periodic-table")
-            .usage("List the elements of the periodic table")
+    fn commands(&self) -> Vec<Box<dyn PluginCommand<Plugin = Self>>> {
+        vec![Box::new(Implementation)]
+    }
+}
+
+struct Implementation;
+
+impl SimplePluginCommand for Implementation {
+    type Plugin = PeriodicTable;
+
+    fn name(&self) -> &str {
+        "periodic-table"
+    }
+
+    fn usage(&self) -> &str {
+        "List the elements of the periodic table"
+    }
+
+    fn signature(&self) -> Signature {
+        Signature::build(PluginCommand::name(self))
             .switch(
                 "classic",
                 "Display the elements in classical form",
                 Some('c'),
             )
             .switch("full", "Display the full names of the columns", Some('f'))
-            .category(Category::Generators)]
+            .category(Category::Generators)
     }
 
-    fn run(&mut self, name: &str, call: &EvaluatedCall, _: &Value) -> Result<Value, LabeledError> {
+    fn run(
+           &self,
+           _plugin: &PeriodicTable,
+           _engine: &EngineInterface,
+           call: &EvaluatedCall,
+           _input: &Value
+    ) -> Result<Value, LabeledError> {
         let tag = call.head;
 
-        if name != "periodic-table" {
+        if PluginCommand::name(self) != "periodic-table" {
             return Ok(Value::nothing(tag));
         }
 
         let should_display_classic_table = call.has_flag("classic");
 
-        if should_display_classic_table {
+        if should_display_classic_table? {
             return PeriodicTable::build_classic_table(&tag);
         }
 
         let should_show_full_column_names = call.has_flag("full");
 
-        PeriodicTable::build_detailed_table(&tag, should_show_full_column_names)
+        PeriodicTable::build_detailed_table(&tag, should_show_full_column_names?)
     }
 }
--- a/src/periodic_table.rs
+++ b/src/periodic_table.rs
@@ -1,8 +1,7 @@
 use crate::extensions::{GroupBlockExt, StateOfMatterExt};
 use crate::periodic_table_grid::PERIODIC_TABLE_GRID;
 use nu_ansi_term::Color;
-use nu_plugin::LabeledError;
-use nu_protocol::{Record, Value};
+use nu_protocol::{LabeledError, Record, Value};
 use periodic_table_on_an_enum::{periodic_table, Element};
 
 pub struct PeriodicTable;
