--- a/src/bootstrap/src/core/sanity.rs
+++ b/src/bootstrap/src/core/sanity.rs
@@ -35,6 +35,15 @@ pub struct Finder {
 const STAGE0_MISSING_TARGETS: &[&str] = &[
     // just a dummy comment so the list doesn't get onelined
     "wasm32-wali-linux-musl",
+    // Entware/OpenWrt
+    "aarch64-openwrt-linux-gnu",
+    "aarch64-openwrt-linux-musl",
+    "armv7-openwrt-linux-gnueabi",
+    "mips-openwrt-linux-gnu",
+    "mips-openwrt-linux-musl",
+    "mipsel-openwrt-linux-gnu",
+    "mipsel-openwrt-linux-musl",
+    "x86_64-openwrt-linux-gnu",
 ];
 
 /// Minimum version threshold for libstdc++ required when using prebuilt LLVM
--- a/src/bootstrap/src/utils/cc_detect.rs
+++ b/src/bootstrap/src/utils/cc_detect.rs
@@ -225,6 +225,21 @@ fn default_compiler(
             }
         }
 
+        "mips-openwrt-linux-musl" if compiler == Language::C => {
+            if cfg.get_compiler().path().to_str() == Some("gcc") {
+                Some(PathBuf::from("mips-linux-musl-gcc"))
+            } else {
+                None
+            }
+        }
+        "mipsel-openwrt-linux-musl" if compiler == Language::C => {
+            if cfg.get_compiler().path().to_str() == Some("gcc") {
+                Some(PathBuf::from("mipsel-linux-musl-gcc"))
+            } else {
+                None
+            }
+        }
+
         "mips-unknown-linux-musl" if compiler == Language::C => {
             if cfg.get_compiler().path().to_str() == Some("gcc") {
                 Some(PathBuf::from("mips-linux-musl-gcc"))
--- a/src/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp
+++ b/src/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp
@@ -2415,14 +2415,16 @@ void Generic_GCC::GCCInstallationDetecto
   // They are not needed when the user has correct LLVM_DEFAULT_TARGET_TRIPLE
   // and always uses the full --target (e.g. --target=aarch64-linux-gnu).  The
   // lists should shrink over time. Please don't add more elements to *Triples.
-  static const char *const AArch64LibDirs[] = {"/lib64", "/lib"};
+  static const char *const AArch64LibDirs[] = {"/opt/lib", "/lib64", "/lib"};
   static const char *const AArch64Triples[] = {
+      "aarch64-openwrt-linux-gnu", "aarch64-openwrt-linux-musl",
       "aarch64-none-linux-gnu", "aarch64-redhat-linux", "aarch64-suse-linux"};
   static const char *const AArch64beLibDirs[] = {"/lib"};
   static const char *const AArch64beTriples[] = {"aarch64_be-none-linux-gnu"};
 
-  static const char *const ARMLibDirs[] = {"/lib"};
-  static const char *const ARMTriples[] = {"arm-linux-gnueabi"};
+  static const char *const ARMLibDirs[] = {"/opt/lib", "/lib"};
+  static const char *const ARMTriples[] = {"arm-linux-gnueabi",
+      "armv7-openwrt-linux-gnueabi", "armv7-openwrt-linux-musleabi"};
   static const char *const ARMHFTriples[] = {"arm-linux-gnueabihf",
                                              "armv7hl-redhat-linux-gnueabi",
                                              "armv6hl-suse-linux-gnueabi",
@@ -2439,8 +2441,9 @@ void Generic_GCC::GCCInstallationDetecto
   static const char *const CSKYTriples[] = {
       "csky-linux-gnuabiv2", "csky-linux-uclibcabiv2", "csky-elf-noneabiv2"};
 
-  static const char *const X86_64LibDirs[] = {"/lib64", "/lib"};
+  static const char *const X86_64LibDirs[] = {"/opt/lib", "/lib64", "/lib"};
   static const char *const X86_64Triples[] = {
+      "x86_64-openwrt-linux-gnu", "x86_64-openwrt-linux-musl",
       "x86_64-linux-gnu",       "x86_64-unknown-linux-gnu",
       "x86_64-pc-linux-gnu",    "x86_64-redhat-linux6E",
       "x86_64-redhat-linux",    "x86_64-suse-linux",
@@ -2449,8 +2452,10 @@ void Generic_GCC::GCCInstallationDetecto
   static const char *const X32Triples[] = {"x86_64-linux-gnux32",
                                            "x86_64-pc-linux-gnux32"};
   static const char *const X32LibDirs[] = {"/libx32", "/lib"};
-  static const char *const X86LibDirs[] = {"/lib32", "/lib"};
+  static const char *const X86LibDirs[] = {"/opt/lib", "/lib32", "/lib"};
   static const char *const X86Triples[] = {
+      "i586-openwrt-linux-gnu", "i686-openwrt-linux-gnu",
+      "i586-openwrt-linux-musl", "i686-openwrt-linux-musl",
       "i586-linux-gnu",      "i686-linux-gnu",        "i686-pc-linux-gnu",
       "i386-redhat-linux6E", "i686-redhat-linux",     "i386-redhat-linux",
       "i586-suse-linux",     "i686-montavista-linux",
@@ -2464,13 +2469,15 @@ void Generic_GCC::GCCInstallationDetecto
   static const char *const M68kTriples[] = {"m68k-unknown-linux-gnu",
                                             "m68k-suse-linux"};
 
-  static const char *const MIPSLibDirs[] = {"/libo32", "/lib"};
+  static const char *const MIPSLibDirs[] = {"/opt/lib", "/libo32", "/lib"};
   static const char *const MIPSTriples[] = {
+      "mips-openwrt-linux-gnu", "mips-openwrt-linux-musl",
       "mips-linux-gnu", "mips-mti-linux", "mips-mti-linux-gnu",
       "mips-img-linux-gnu", "mipsisa32r6-linux-gnu"};
-  static const char *const MIPSELLibDirs[] = {"/libo32", "/lib"};
-  static const char *const MIPSELTriples[] = {"mipsel-linux-gnu",
-                                              "mips-img-linux-gnu"};
+  static const char *const MIPSELLibDirs[] = {"/opt/lib", "/libo32", "/lib"};
+  static const char *const MIPSELTriples[] = {
+      "mipsel-openwrt-linux-gnu", "mipsel-openwrt-linux-musl",
+      "mipsel-linux-gnu", "mips-img-linux-gnu"};
 
   static const char *const MIPS64LibDirs[] = {"/lib64", "/lib"};
   static const char *const MIPS64Triples[] = {
--- a/src/llvm-project/llvm/include/llvm/TargetParser/Triple.h
+++ b/src/llvm-project/llvm/include/llvm/TargetParser/Triple.h
@@ -192,6 +192,7 @@ public:
     AMD,
     Mesa,
     SUSE,
+    OpenWrt,
     OpenEmbedded,
     Intel,
     LastVendorType = Intel
--- a/src/llvm-project/llvm/lib/TargetParser/Triple.cpp
+++ b/src/llvm-project/llvm/lib/TargetParser/Triple.cpp
@@ -267,6 +267,7 @@ StringRef Triple::getVendorTypeName(Vend
   case MipsTechnologies: return "mti";
   case NVIDIA: return "nvidia";
   case OpenEmbedded: return "oe";
+  case OpenWrt: return "openwrt";
   case PC: return "pc";
   case SCEI: return "scei";
   case SUSE: return "suse";
@@ -663,6 +664,7 @@ static Triple::VendorType parseVendor(St
       .Case("mesa", Triple::Mesa)
       .Case("suse", Triple::SUSE)
       .Case("oe", Triple::OpenEmbedded)
+      .Case("openwrt", Triple::OpenWrt)
       .Case("intel", Triple::Intel)
       .Default(Triple::UnknownVendor);
 }
