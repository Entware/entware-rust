 error: failed to run custom build command for `pavao v0.2.3`
   --- stderr
  thread 'main' panicked at '`PKG_CONFIG_ALLOW_SYSTEM_CFLAGS="1"
  PKG_CONFIG_ALLOW_SYSTEM_LIBS="1"
  PKG_CONFIG_LIBDIR=".../target-*/opt/lib/pkgconfig:.../target-*/opt/share/pkgconfig"
  PKG_CONFIG_PATH=".../target-*/opt/lib/pkgconfig:.../target-*/opt/share/pkgconfig"
  PKG_CONFIG_SYSROOT_DIR=".../target-*/opt" ".../host/bin/pkg-config"
  "--libs" "--cflags" "smbclient"`
  did not exit successfully: exit status: 1
  error: could not find system library 'smbclient' required by the 'pavao' crate

  --- stderr
  Package smbclient was not found in the pkg-config search path.
  Perhaps you should add the directory containing `smbclient.pc'
  to the PKG_CONFIG_PATH environment variable
  Package 'smbclient', required by 'virtual:world', not found
  ', .../pavao-0.2.3/build.rs:28:13

 error: failed to compile `termscp v0.12.0 (.../termscp-0.12.0)`,
 intermediate artifacts can be found at `.../termscp-0.12.0/*`

--- a/src/filetransfer/builder.rs
+++ b/src/filetransfer/builder.rs
@@ -7,16 +7,11 @@ use std::path::PathBuf;
 use remotefs::RemoteFs;
 use remotefs_aws_s3::AwsS3Fs;
 use remotefs_ftp::FtpFs;
-#[cfg(smb_unix)]
-use remotefs_smb::SmbOptions;
-#[cfg(smb)]
-use remotefs_smb::{SmbCredentials, SmbFs};
 use remotefs_ssh::{ScpFs, SftpFs, SshConfigParseRule, SshOpts};
 
 #[cfg(not(smb))]
 use super::params::{AwsS3Params, GenericProtocolParams};
-#[cfg(smb)]
-use super::params::{AwsS3Params, GenericProtocolParams, SmbParams};
+use super::params::{AwsS3Params, GenericProtocolParams};
 use super::{FileTransferProtocol, ProtocolParams};
 use crate::system::config_client::ConfigClient;
 use crate::system::sshkey_storage::SshKeyStorage;
@@ -47,10 +42,6 @@ impl Builder {
             (FileTransferProtocol::Sftp, ProtocolParams::Generic(params)) => {
                 Box::new(Self::sftp_client(params, config_client))
             }
-            #[cfg(smb)]
-            (FileTransferProtocol::Smb, ProtocolParams::Smb(params)) => {
-                Box::new(Self::smb_client(params))
-            }
             (protocol, params) => {
                 error!("Invalid params for protocol '{:?}'", protocol);
                 panic!("Invalid protocol '{protocol:?}' with parameters of type {params:?}")
@@ -110,36 +101,6 @@ impl Builder {
         Self::build_ssh_opts(params, config_client).into()
     }
 
-    #[cfg(smb_unix)]
-    fn smb_client(params: SmbParams) -> SmbFs {
-        let mut credentials = SmbCredentials::default()
-            .server(format!("smb://{}:{}", params.address, params.port))
-            .share(params.share);
-
-        if let Some(username) = params.username {
-            credentials = credentials.username(username);
-        }
-        if let Some(password) = params.password {
-            credentials = credentials.password(password);
-        }
-        if let Some(workgroup) = params.workgroup {
-            credentials = credentials.workgroup(workgroup);
-        }
-
-        match SmbFs::try_new(
-            credentials,
-            SmbOptions::default()
-                .one_share_per_server(true)
-                .case_sensitive(false),
-        ) {
-            Ok(fs) => fs,
-            Err(e) => {
-                error!("Invalid params for protocol SMB: {e}");
-                panic!("Invalid params for protocol SMB: {e}")
-            }
-        }
-    }
-
     #[cfg(windows)]
     fn smb_client(params: SmbParams) -> SmbFs {
         let mut credentials = SmbCredentials::new(params.address, params.share);
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -78,17 +78,17 @@ default = [ "with-keyring" ]
 github-actions = [ ]
 with-keyring = [ "keyring" ]
 
-[target."cfg(not(target_os = \"macos\"))"]
-[target."cfg(not(target_os = \"macos\"))".dependencies]
+[target.'cfg(not(target_family = "unix"))']
+[target.'cfg(not(target_family = "unix"))'.dependencies]
 remotefs-smb = "^0.2"
 
-[target."cfg(target_family = \"windows\")"]
-[target."cfg(target_family = \"windows\")".dependencies]
+[target.'cfg(target_family = "windows")']
+[target.'cfg(target_family = "windows")'.dependencies]
 remotefs-ftp = { version = "^0.1.2", features = [ "native-tls" ] }
 remotefs-ssh = "^0.2"
 
-[target."cfg(target_family = \"unix\")"]
-[target."cfg(target_family = \"unix\")".dependencies]
+[target.'cfg(target_family = "unix")']
+[target.'cfg(target_family = "unix")'.dependencies]
 remotefs-ftp = { version = "^0.1.2", features = [ "vendored", "native-tls" ] }
 remotefs-ssh = { version = "^0.2", features = [ "ssh2-vendored" ] }
 users = "0.11.0"
