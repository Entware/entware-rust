From ceb052215a28a9355f48349e8f3df1323772c5cd Mon Sep 17 00:00:00 2001
From: John <admin@iios.net>
Date: Mon, 7 Nov 2022 16:12:42 +0800
Subject: [PATCH 10/13] Update quinn to 0.9

---
 Cargo.toml    | 12 ++++++------
 src/client.rs | 12 ++++--------
 src/server.rs | 14 +++++++-------
 3 files changed, 17 insertions(+), 21 deletions(-)

--- a/Cargo.toml
+++ b/Cargo.toml
@@ -4,7 +4,7 @@ version = "0.2.0"
 authors = ["Max Lv <max.c.lv@gmail.com>"]
 repository = "https://github.com/madeye/qtun"
 license = "MIT"
-edition = "2018"
+edition = "2021"
 
 [[bin]]
 name = "qtun-client"
@@ -18,16 +18,16 @@ path = "src/server.rs"
 
 [dependencies]
 tokio = { version = "1", features = ["full"] }
-bytes = "0.5"
+bytes = "1.2.1"
 futures = "0.3"
 rustls = "0.20"
-rustls-pemfile  = "0.2.1"
+rustls-pemfile  = "1.0.1"
 rustls-native-certs = "0.6.1"
 webpki-roots = "0.22.1"
-quinn = "0.8"
+quinn = "0.9.0"
 structopt = "0.3"
 anyhow = "1.0"
 tracing = "0.1"
 log = "0.4"
-env_logger = "0.7"
-dirs = "2.0"
+env_logger = "0.9.1"
+dirs = "4.0.0"
--- a/src/client.rs
+++ b/src/client.rs
@@ -79,9 +79,9 @@ async fn main() -> Result<()> {
 
     // WAR for Windows endpoint
     let mut endpoint = if cfg!(target_os = "windows") {
-        quinn::Endpoint::client("0.0.0.0:0".parse().unwrap())
+        Endpoint::client("0.0.0.0:0".parse().unwrap())
     } else {
-        quinn::Endpoint::client("[::]:0".parse().unwrap())
+        Endpoint::client("[::]:0".parse().unwrap())
     }?;
     endpoint.set_default_client_config(quinn::ClientConfig::new(Arc::new(client_crypto)));
 
@@ -138,15 +138,11 @@ async fn transfer(
         })
         .unwrap();
 
-    let quinn::NewConnection {
-        connection: conn, ..
-    } = { new_conn };
-
     let (mut ri, mut wi) = inbound.split();
-    let (mut wo, mut ro) = conn
+    let (mut wo, mut ro) = new_conn
         .open_bi()
         .await
-        .map_err(|e| anyhow!("failed to open stream: {}", e))?;
+        .map_err(|e| anyhow!("failed to open stream: {:?}", e))?;
 
     let client_to_server = tokio::io::copy(&mut ri, &mut wo);
     let server_to_client = tokio::io::copy(&mut ro, &mut wi);
--- a/src/server.rs
+++ b/src/server.rs
@@ -7,7 +7,7 @@ use anyhow::{Context, Result};
 use dirs::home_dir;
 use env_logger::Builder;
 use futures::future::try_join;
-use futures::{StreamExt, TryFutureExt};
+use futures::TryFutureExt;
 use log::LevelFilter;
 use log::{error, info};
 use structopt::{self, StructOpt};
@@ -145,10 +145,10 @@ async fn main() -> Result<()> {
 
     let remote = Arc::<SocketAddr>::from(relay_addr);
 
-    let (endpoint, mut incoming) = quinn::Endpoint::server(server_config, listen_addr)?;
+    let endpoint = quinn::Endpoint::server(server_config, listen_addr)?;
     eprintln!("listening on {}", endpoint.local_addr()?);
 
-    while let Some(conn) = incoming.next().await {
+    while let Some(conn) = endpoint.accept().await {
         info!("connection incoming");
         tokio::spawn(
             handle_connection(remote.clone(), conn).unwrap_or_else(move |e| {
@@ -161,14 +161,15 @@ async fn main() -> Result<()> {
 }
 
 async fn handle_connection(remote: Arc<SocketAddr>, conn: quinn::Connecting) -> Result<()> {
-    let quinn::NewConnection { mut bi_streams, .. } = conn.await?;
+    let bi_streams = conn.await?;
 
     async {
         info!("established");
 
         // Each stream initiated by the client constitutes a new request.
-        while let Some(stream) = bi_streams.next().await {
-            let stream = match stream {
+        loop {
+            // let (stream) = bi_streams.accept_bi().await
+            let stream = match bi_streams.accept_bi().await {
                 Err(quinn::ConnectionError::ApplicationClosed { .. }) => {
                     info!("connection closed");
                     return Ok(());
@@ -183,7 +184,6 @@ async fn handle_connection(remote: Arc<S
                     .unwrap_or_else(move |e| error!("failed: {reason}", reason = e.to_string())),
             );
         }
-        Ok(())
     }
     .await?;
 
