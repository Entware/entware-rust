From d9924cfdf86c555f3f6c2b5784672e3f4a897d0d Mon Sep 17 00:00:00 2001
From: Max Lv <max.c.lv@gmail.com>
Date: Sun, 12 Dec 2021 10:46:14 +0800
Subject: [PATCH 01/13] Fix the issue on Windows

---
 Cargo.toml                   |  1 +
 build/build-host-release.ps1 |  2 +-
 src/client.rs                | 16 +++++++++++++++-
 3 files changed, 17 insertions(+), 2 deletions(-)

--- a/Cargo.toml
+++ b/Cargo.toml
@@ -23,6 +23,7 @@ futures = "0.3"
 rustls = "0.20"
 rustls-pemfile  = "0.2.1"
 rustls-native-certs = "0.6.1"
+webpki-roots = "0.22.1"
 quinn = "0.8"
 structopt = "0.3"
 anyhow = "1.0"
--- a/build/build-host-release.ps1
+++ b/build/build-host-release.ps1
@@ -32,7 +32,7 @@ $Version = (Select-String -Pattern '^ver
 $Version = $Version -replace '"'
 
 $PackageReleasePath = "${PSScriptRoot}\release"
-$PackageName = "shadowsocks-v${Version}.${TargetTriple}.zip"
+$PackageName = "qtun-v${Version}.${TargetTriple}.zip"
 $PackagePath = "${PackageReleasePath}\${PackageName}"
 
 Write-Host $Version
--- a/src/client.rs
+++ b/src/client.rs
@@ -56,10 +56,19 @@ async fn main() -> Result<()> {
     }
 
     let mut roots = rustls::RootCertStore::empty();
+
     for cert in rustls_native_certs::load_native_certs().expect("could not load platform certs") {
         roots.add(&rustls::Certificate(cert.0)).unwrap();
     }
 
+    roots.add_server_trust_anchors(webpki_roots::TLS_SERVER_ROOTS.0.iter().map(|ta| {
+        rustls::OwnedTrustAnchor::from_subject_spki_name_constraints(
+            ta.subject,
+            ta.spki,
+            ta.name_constraints,
+        )
+    }));
+
     let mut client_crypto = rustls::ClientConfig::builder()
         .with_safe_defaults()
         .with_root_certificates(roots)
@@ -67,7 +76,12 @@ async fn main() -> Result<()> {
 
     client_crypto.alpn_protocols = common::ALPN_QUIC_HTTP.iter().map(|&x| x.into()).collect();
 
-    let mut endpoint = quinn::Endpoint::client("[::]:0".parse().unwrap())?;
+    // WAR for Windows endpoint
+    let mut endpoint = if cfg!(target_os = "windows") {
+        quinn::Endpoint::client("0.0.0.0:0".parse().unwrap())
+    } else {
+        quinn::Endpoint::client("[::]:0".parse().unwrap())
+    }?;
     endpoint.set_default_client_config(quinn::ClientConfig::new(Arc::new(client_crypto)));
 
     let remote = Arc::<SocketAddr>::from(relay_addr);
