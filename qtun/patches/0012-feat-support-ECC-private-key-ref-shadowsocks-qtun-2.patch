From 9e1834e00f38d0424f5252fe6331533bfc50d207 Mon Sep 17 00:00:00 2001
From: Dnomd343 <i@343.re>
Date: Wed, 1 Feb 2023 17:38:01 +0800
Subject: [PATCH 12/13] feat: support ECC private key, ref shadowsocks/qtun#2

---
 Cargo.toml    |  2 +-
 src/server.rs | 39 +++++++++++++++++++++++++++------------
 2 files changed, 28 insertions(+), 13 deletions(-)

--- a/Cargo.toml
+++ b/Cargo.toml
@@ -21,7 +21,7 @@ tokio = { version = "1", features = ["fu
 bytes = "1.2.1"
 futures = "0.3"
 rustls = "0.20"
-rustls-pemfile  = "1.0.1"
+rustls-pemfile  = "1.0.2"
 rustls-native-certs = "0.6.1"
 webpki-roots = "0.22.1"
 quinn = "0.9.0"
--- a/src/server.rs
+++ b/src/server.rs
@@ -9,9 +9,10 @@ use env_logger::Builder;
 use futures::future::try_join;
 use futures::TryFutureExt;
 use log::LevelFilter;
-use log::{error, info};
+use log::{error, info, debug};
 use structopt::{self, StructOpt};
 use tokio::net::TcpStream;
+use rustls_pemfile::Item;
 
 mod args;
 mod common;
@@ -98,24 +99,38 @@ async fn main() -> Result<()> {
 
     let key = fs::read(key_path.clone()).context("failed to read private key")?;
     let key = if key_path.extension().map_or(false, |x| x == "der") {
+        debug!("private key with DER format");
         rustls::PrivateKey(key)
     } else {
-        let pkcs8 = rustls_pemfile::pkcs8_private_keys(&mut &*key)
-            .context("malformed PKCS #8 private key")?;
-        match pkcs8.into_iter().next() {
-            Some(x) => rustls::PrivateKey(x),
-            None => {
-                let rsa = rustls_pemfile::rsa_private_keys(&mut &*key)
-                    .context("malformed PKCS #1 private key")?;
-                match rsa.into_iter().next() {
-                    Some(x) => rustls::PrivateKey(x),
-                    None => {
+        match rustls_pemfile::read_one(&mut &*key) {
+            Ok(x) => {
+                match x.unwrap() {
+                    Item::RSAKey(key) => {
+                        debug!("private key with PKCS #1 format");
+                        rustls::PrivateKey(key)
+                    },
+                    Item::PKCS8Key(key) => {
+                        debug!("private key with PKCS #8 format");
+                        rustls::PrivateKey(key)
+                    },
+                    Item::ECKey(key) => {
+                        debug!("private key with SEC1 format");
+                        rustls::PrivateKey(key)
+                    },
+                    Item::X509Certificate(_) => {
+                        anyhow::bail!("you should provide a key file instead of cert");
+                    },
+                    _ => {
                         anyhow::bail!("no private keys found");
-                    }
+                    },
                 }
             }
+            Err(_) => {
+                anyhow::bail!("malformed private key");
+            }
         }
     };
+
     let certs = fs::read(cert_path.clone()).context("failed to read certificate chain")?;
     let certs = if cert_path.extension().map_or(false, |x| x == "der") {
         vec![rustls::Certificate(certs)]
