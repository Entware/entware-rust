From db2e18c3555bcae27148c6bac3594ff969ed5634 Mon Sep 17 00:00:00 2001
From: Max Lv <max.c.lv@gmail.com>
Date: Fri, 3 Feb 2023 10:44:17 +0800
Subject: [PATCH 13/13] Allow empty SS_PLUGIN_OPTS

---
 src/args/mod.rs |  8 ++++++--
 src/client.rs   |  4 +++-
 src/server.rs   | 49 ++++++++++++++++++++++++-------------------------
 3 files changed, 33 insertions(+), 28 deletions(-)

--- a/src/args/mod.rs
+++ b/src/args/mod.rs
@@ -3,7 +3,7 @@ use std::collections::HashMap;
 use std::env::var;
 use std::net::{SocketAddr, ToSocketAddrs};
 
-pub fn parse_env() -> Result<(SocketAddr, SocketAddr, HashMap<String, String>)> {
+pub fn parse_env_addr() -> Result<(SocketAddr, SocketAddr)> {
     let ss_remote_host = var("SS_REMOTE_HOST")?;
     let ss_remote_port = var("SS_REMOTE_PORT")?;
     let ss_local_host = var("SS_LOCAL_HOST")?;
@@ -18,11 +18,15 @@ pub fn parse_env() -> Result<(SocketAddr
         .next()
         .unwrap();
 
+    Ok((ss_local_addr, ss_remote_addr))
+}
+
+pub fn parse_env_opts() -> Result<HashMap<String, String>> {
     let ss_plugin_options = var("SS_PLUGIN_OPTIONS")?;
 
     let ss_plugin_options = parse_plugin_options(&ss_plugin_options);
 
-    Ok((ss_local_addr, ss_remote_addr, ss_plugin_options))
+    Ok(ss_plugin_options)
 }
 
 /// Parse a nameâ€“value mapping as from SS_PLUGIN_OPTIONS.
--- a/src/client.rs
+++ b/src/client.rs
@@ -47,10 +47,12 @@ async fn main() -> Result<()> {
     let mut host = options.host;
 
     // parse environment variables
-    if let Ok((ss_local_addr, ss_remote_addr, ss_plugin_opts)) = args::parse_env() {
+    if let Ok((ss_local_addr, ss_remote_addr)) = args::parse_env_addr() {
         // init all parameters
         listen_addr = ss_local_addr;
         relay_addr = ss_remote_addr;
+    }
+    if let Ok(ss_plugin_opts) = args::parse_env_opts() {
         if let Some(h) = ss_plugin_opts.get("host") {
             host = h.clone();
         }
--- a/src/server.rs
+++ b/src/server.rs
@@ -9,10 +9,10 @@ use env_logger::Builder;
 use futures::future::try_join;
 use futures::TryFutureExt;
 use log::LevelFilter;
-use log::{error, info, debug};
+use log::{debug, error, info};
+use rustls_pemfile::Item;
 use structopt::{self, StructOpt};
 use tokio::net::TcpStream;
-use rustls_pemfile::Item;
 
 mod args;
 mod common;
@@ -69,10 +69,11 @@ async fn main() -> Result<()> {
     let mut relay_addr = options.relay;
 
     // parse environment variables
-    if let Ok((ss_local_addr, ss_remote_addr, ss_plugin_opts)) = args::parse_env() {
+    if let Ok((ss_local_addr, ss_remote_addr)) = args::parse_env_addr() {
         relay_addr = ss_local_addr;
         listen_addr = ss_remote_addr;
-
+    }
+    if let Ok(ss_plugin_opts) = args::parse_env_opts() {
         if let Some(cert) = ss_plugin_opts.get("cert") {
             cert_path = PathBuf::from(cert);
         }
@@ -103,28 +104,26 @@ async fn main() -> Result<()> {
         rustls::PrivateKey(key)
     } else {
         match rustls_pemfile::read_one(&mut &*key) {
-            Ok(x) => {
-                match x.unwrap() {
-                    Item::RSAKey(key) => {
-                        debug!("private key with PKCS #1 format");
-                        rustls::PrivateKey(key)
-                    },
-                    Item::PKCS8Key(key) => {
-                        debug!("private key with PKCS #8 format");
-                        rustls::PrivateKey(key)
-                    },
-                    Item::ECKey(key) => {
-                        debug!("private key with SEC1 format");
-                        rustls::PrivateKey(key)
-                    },
-                    Item::X509Certificate(_) => {
-                        anyhow::bail!("you should provide a key file instead of cert");
-                    },
-                    _ => {
-                        anyhow::bail!("no private keys found");
-                    },
+            Ok(x) => match x.unwrap() {
+                Item::RSAKey(key) => {
+                    debug!("private key with PKCS #1 format");
+                    rustls::PrivateKey(key)
                 }
-            }
+                Item::PKCS8Key(key) => {
+                    debug!("private key with PKCS #8 format");
+                    rustls::PrivateKey(key)
+                }
+                Item::ECKey(key) => {
+                    debug!("private key with SEC1 format");
+                    rustls::PrivateKey(key)
+                }
+                Item::X509Certificate(_) => {
+                    anyhow::bail!("you should provide a key file instead of cert");
+                }
+                _ => {
+                    anyhow::bail!("no private keys found");
+                }
+            },
             Err(_) => {
                 anyhow::bail!("malformed private key");
             }
