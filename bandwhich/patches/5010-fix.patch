# https://github.com/imsnif/bandwhich/pull/271

--- a/Cargo.toml
+++ b/Cargo.toml
@@ -19,38 +19,35 @@ license = "MIT"
 exclude = ["src/tests/*", "demo.gif"]
 
 [dependencies]
-pnet = "0.26.0"
-ipnetwork = "0.16.0"
-tui = { version = "0.12", default-features = false, features = ["crossterm"]}
-crossterm = "0.17.7"
+pnet = "0.33.0"
+ipnetwork = "0.20.0"
+tui = { package = "ratatui", version = "0.21.0", default-features = false, features = ["crossterm"]}
+crossterm = "0.26.1"
 structopt = "0.3"
-failure = "0.1.6"
+failure = "0.1.8"
 chrono = "0.4"
 regex = "1.3.1"
 lazy_static = "1.4.0"
-tokio = { version = "0.2", features = ["rt-core", "sync"] }
-trust-dns-resolver = "0.18.1"
+tokio = { version = "1.28.2", features = ["rt", "sync"] }
+trust-dns-resolver = "0.22.0"
 async-trait = "0.1.21"
 unicode-width = "0.1.8"
 resolv-conf = "0.7.0"
 
 [target.'cfg(target_os="windows")'.dependencies]
 netstat2 = "0.9.0"
-sysinfo = "0.15.1"
+sysinfo = "0.29.2"
 
 [target.'cfg(target_os="linux")'.dependencies]
-procfs = "0.7.4"
+procfs = "0.15.1"
 
 [dev-dependencies]
-insta = "0.12.0"
-pnet_base = "0.26.0"
-cargo-insta = "0.11.0"
-packet-builder = "0.5.0"
+insta = "1.29.0"
+pnet_base = "0.33.0"
+cargo-insta = "1.29.0"
+packet-builder = "0.7.0"
 regex = "1"
 
 [target.'cfg(target_os="windows")'.build-dependencies]
-http_req = "0.7.0"
-zip = "0.5.6"
-
-[patch.crates-io]
-resolv-conf = { git = 'https://github.com/tailhook/resolv-conf', rev = '83c0f25ebcb0615550488692c5213ca1ae4acd8f' }
+http_req = "0.9.1"
+zip = "0.6.6"
--- a/src/display/components/layout.rs
+++ b/src/display/components/layout.rs
@@ -37,12 +37,12 @@ impl<'a> Layout<'a> {
             .into_iter()
             .fold(vec![rect], |mut layout, direction| {
                 let last_rect = layout.pop().unwrap();
-                let mut halves = ::tui::layout::Layout::default()
+                let halves = ::tui::layout::Layout::default()
                     .direction(direction)
                     .margin(0)
                     .constraints([Constraint::Percentage(50), Constraint::Percentage(50)].as_ref())
                     .split(last_rect);
-                layout.append(&mut halves);
+                layout.append(&mut halves.to_vec());
                 layout
             })
     }
--- a/src/display/components/table.rs
+++ b/src/display/components/table.rs
@@ -289,12 +289,12 @@ impl<'a> Table<'a> {
             ],
         });
 
-        let table_rows = rows.map(|row| Row::StyledData(row.into_iter(), Style::default()));
+        let table_rows = rows.map(|row| Row::new(row));
         let width_constraints: Vec<Constraint> =
             widths.iter().map(|w| Constraint::Length(*w)).collect();
-        let table = ::tui::widgets::Table::new(column_names.into_iter(), table_rows)
+        let table = ::tui::widgets::Table::new(table_rows)
             .block(Block::default().title(self.title).borders(Borders::ALL))
-            .header_style(Style::default().fg(Color::Yellow))
+            .header(Row::new(column_names.clone()).style(Style::default().fg(Color::Yellow)))
             .widths(&width_constraints)
             .style(Style::default())
             .column_spacing(column_spacing);
--- a/src/main.rs
+++ b/src/main.rs
@@ -226,10 +226,12 @@ where
                             Event::Key(KeyEvent {
                                 modifiers: KeyModifiers::CONTROL,
                                 code: KeyCode::Char('c'),
+                                ..
                             })
                             | Event::Key(KeyEvent {
                                 modifiers: KeyModifiers::NONE,
                                 code: KeyCode::Char('q'),
+                                ..
                             }) => {
                                 running.store(false, Ordering::Release);
                                 display_handler.unpark();
@@ -242,6 +244,7 @@ where
                             Event::Key(KeyEvent {
                                 modifiers: KeyModifiers::NONE,
                                 code: KeyCode::Char(' '),
+                                ..
                             }) => {
                                 let restarting = paused.fetch_xor(true, Ordering::SeqCst);
                                 if restarting {
@@ -260,6 +263,7 @@ where
                             Event::Key(KeyEvent {
                                 modifiers: KeyModifiers::NONE,
                                 code: KeyCode::Tab,
+                                ..
                             }) => {
                                 let paused = paused.load(Ordering::SeqCst);
                                 let elapsed_time = elapsed_time(
--- a/src/network/dns/client.rs
+++ b/src/network/dns/client.rs
@@ -22,7 +22,7 @@ pub struct Client {
 }
 
 impl Client {
-    pub fn new<R>(resolver: R, mut runtime: Runtime) -> Result<Self, failure::Error>
+    pub fn new<R>(resolver: R, runtime: Runtime) -> Result<Self, failure::Error>
     where
         R: Lookup + Send + Sync + 'static,
     {
--- a/src/network/dns/resolver.rs
+++ b/src/network/dns/resolver.rs
@@ -2,8 +2,8 @@ use async_trait::async_trait;
 use std::net::IpAddr;
 use std::net::SocketAddr;
 use std::net::{Ipv4Addr, SocketAddrV4};
-use tokio::runtime::Handle;
 use trust_dns_resolver::config::{NameServerConfig, Protocol, ResolverConfig, ResolverOpts};
+use trust_dns_resolver::TokioHandle;
 use trust_dns_resolver::{error::ResolveErrorKind, TokioAsyncResolver};
 
 #[async_trait]
@@ -15,7 +15,7 @@ pub struct Resolver(TokioAsyncResolver);
 
 impl Resolver {
     pub async fn new(
-        runtime: Handle,
+        runtime: TokioHandle,
         dns_server: &Option<Ipv4Addr>,
     ) -> Result<Self, failure::Error> {
         let resolver = match dns_server {
@@ -23,15 +23,11 @@ impl Resolver {
                 let mut config = ResolverConfig::new();
                 let options = ResolverOpts::default();
                 let socket = SocketAddr::V4(SocketAddrV4::new(*dns_server_address, 53));
-                let nameserver_config = NameServerConfig {
-                    socket_addr: socket,
-                    protocol: Protocol::Udp,
-                    tls_dns_name: None,
-                };
+                let nameserver_config = NameServerConfig::new(socket, Protocol::Udp);
                 config.add_name_server(nameserver_config);
-                TokioAsyncResolver::new(config, options, runtime).await?
+                TokioAsyncResolver::new(config, options, runtime)?
             }
-            None => TokioAsyncResolver::from_system_conf(runtime).await?,
+            None => TokioAsyncResolver::from_system_conf(runtime)?,
         };
         Ok(Self(resolver))
     }
--- a/src/os/linux.rs
+++ b/src/os/linux.rs
@@ -11,11 +11,17 @@ pub(crate) fn get_open_sockets() -> Open
 
     if let Ok(all_procs) = procfs::process::all_processes() {
         for process in all_procs {
-            if let Ok(fds) = process.fd() {
-                let procname = process.stat.comm;
-                for fd in fds {
-                    if let FDTarget::Socket(inode) = fd.target {
-                        inode_to_procname.insert(inode, procname.clone());
+            if let Ok(process) = process {
+                if let Ok(fds) = process.fd() {
+                    if let Ok(stat) = process.stat() {
+                        let procname = stat.comm;
+                        for fd in fds {
+                            if let Ok(fd) = fd {
+                                if let FDTarget::Socket(inode) = fd.target {
+                                    inode_to_procname.insert(inode, procname.clone());
+                                }
+                            }
+                        }
                     }
                 }
             }
--- a/src/os/shared.rs
+++ b/src/os/shared.rs
@@ -5,6 +5,7 @@ use ::pnet::datalink::DataLinkReceiver;
 use ::pnet::datalink::{self, Config, NetworkInterface};
 use ::std::io::{self, ErrorKind, Write};
 use ::tokio::runtime::Runtime;
+use trust_dns_resolver::TokioHandle;
 
 use ::std::net::Ipv4Addr;
 use ::std::time;
@@ -204,15 +205,14 @@ pub fn get_input(
     let keyboard_events = Box::new(TerminalEvents);
     let write_to_stdout = create_write_to_stdout();
     let dns_client = if resolve {
-        let mut runtime = Runtime::new()?;
-        let resolver =
-            match runtime.block_on(dns::Resolver::new(runtime.handle().clone(), dns_server)) {
-                Ok(resolver) => resolver,
-                Err(err) => failure::bail!(
-                    "Could not initialize the DNS resolver. Are you offline?\n\nReason: {:?}",
-                    err
-                ),
-            };
+        let runtime = Runtime::new()?;
+        let resolver = match runtime.block_on(dns::Resolver::new(TokioHandle, dns_server)) {
+            Ok(resolver) => resolver,
+            Err(err) => failure::bail!(
+                "Could not initialize the DNS resolver. Are you offline?\n\nReason: {:?}",
+                err
+            ),
+        };
         let dns_client = dns::Client::new(resolver, runtime)?;
         Some(dns_client)
     } else {
