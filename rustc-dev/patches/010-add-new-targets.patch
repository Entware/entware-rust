--- a/compiler/rustc_target/src/spec/base/mod.rs
+++ b/compiler/rustc_target/src/spec/base/mod.rs
@@ -22,6 +22,9 @@ pub(crate) mod msvc;
 pub(crate) mod netbsd;
 pub(crate) mod nto_qnx;
 pub(crate) mod openbsd;
+pub(crate) mod openwrt_linux;
+pub(crate) mod openwrt_linux_gnu;
+pub(crate) mod openwrt_linux_musl;
 pub(crate) mod redox;
 pub(crate) mod solaris;
 pub(crate) mod solid;
--- /dev/null
+++ b/compiler/rustc_target/src/spec/base/openwrt_linux.rs
@@ -0,0 +1,23 @@
+use std::borrow::Cow;
+
+use crate::spec::{RelroLevel, SplitDebuginfo, TargetOptions, cvs};
+
+pub(crate) fn opts() -> TargetOptions {
+    TargetOptions {
+        os: "linux".into(),
+        vendor: "openwrt".into(),
+        dynamic_linking: true,
+        families: cvs!["unix"],
+        has_rpath: false,
+        position_independent_executables: false,
+        relro_level: RelroLevel::None,
+        has_thread_local: true,
+        crt_static_respected: true,
+        supported_split_debuginfo: Cow::Borrowed(&[
+            SplitDebuginfo::Packed,
+            SplitDebuginfo::Unpacked,
+            SplitDebuginfo::Off,
+        ]),
+        ..Default::default()
+    }
+}
--- /dev/null
+++ b/compiler/rustc_target/src/spec/base/openwrt_linux_gnu.rs
@@ -0,0 +1,5 @@
+use crate::spec::{TargetOptions, base};
+
+pub(crate) fn opts() -> TargetOptions {
+    TargetOptions { env: "gnu".into(), ..base::openwrt_linux::opts() }
+}
--- /dev/null
+++ b/compiler/rustc_target/src/spec/base/openwrt_linux_musl.rs
@@ -0,0 +1,12 @@
+use crate::spec::{LinkSelfContainedDefault, TargetOptions, base, crt_objects};
+
+pub(crate) fn opts() -> TargetOptions {
+    let mut base = base::openwrt_linux::opts();
+
+    base.env = "musl".into();
+    base.pre_link_objects_self_contained = crt_objects::pre_musl_self_contained();
+    base.post_link_objects_self_contained = crt_objects::post_musl_self_contained();
+    base.link_self_contained = LinkSelfContainedDefault::InferredForMusl;
+
+    base
+}
--- /dev/null
+++ b/compiler/rustc_target/src/spec/targets/aarch64_openwrt_linux_gnu.rs
@@ -0,0 +1,32 @@
+use crate::spec::{SanitizerSet, StackProbeType, Target, TargetOptions, base};
+
+pub(crate) fn target() -> Target {
+    Target {
+        llvm_target: "aarch64-openwrt-linux-gnu".into(),
+        metadata: crate::spec::TargetMetadata {
+            description: Some("ARM64 Linux (kernel 4.1, glibc 2.17+)".into()),
+            tier: Some(1),
+            host_tools: Some(true),
+            std: Some(true),
+        },
+        pointer_width: 64,
+        data_layout: "e-m:e-p270:32:32-p271:32:32-p272:64:64-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128-Fn32".into(),
+        arch: "aarch64".into(),
+        options: TargetOptions {
+            features: "+v8a".into(),
+            mcount: "\u{1}_mcount".into(),
+            max_atomic_width: Some(128),
+            stack_probes: StackProbeType::Inline,
+            supported_sanitizers: SanitizerSet::ADDRESS
+                | SanitizerSet::CFI
+                | SanitizerSet::KCFI
+                | SanitizerSet::LEAK
+                | SanitizerSet::MEMORY
+                | SanitizerSet::MEMTAG
+                | SanitizerSet::THREAD
+                | SanitizerSet::HWADDRESS,
+            supports_xray: true,
+            ..base::openwrt_linux_gnu::opts()
+        },
+    }
+}
--- /dev/null
+++ b/compiler/rustc_target/src/spec/targets/aarch64_openwrt_linux_musl.rs
@@ -0,0 +1,31 @@
+use crate::spec::{SanitizerSet, StackProbeType, Target, TargetOptions, base};
+
+pub(crate) fn target() -> Target {
+    let mut base = base::openwrt_linux_musl::opts();
+    base.max_atomic_width = Some(128);
+    base.supports_xray = true;
+    base.features = "+v8a".into();
+    base.stack_probes = StackProbeType::Inline;
+    base.supported_sanitizers = SanitizerSet::ADDRESS
+        | SanitizerSet::CFI
+        | SanitizerSet::LEAK
+        | SanitizerSet::MEMORY
+        | SanitizerSet::THREAD;
+
+    // FIXME(compiler-team#422): musl targets should be dynamically linked by default.
+    base.crt_static_default = false;
+
+    Target {
+        llvm_target: "aarch64-openwrt-linux-musl".into(),
+        metadata: crate::spec::TargetMetadata {
+            description: Some("ARM64 Linux with musl 1.2.3".into()),
+            tier: Some(2),
+            host_tools: Some(true),
+            std: Some(true),
+        },
+        pointer_width: 64,
+        data_layout: "e-m:e-p270:32:32-p271:32:32-p272:64:64-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128-Fn32".into(),
+        arch: "aarch64".into(),
+        options: TargetOptions { mcount: "\u{1}_mcount".into(), ..base },
+    }
+}
--- /dev/null
+++ b/compiler/rustc_target/src/spec/targets/arm_openwrt_linux_gnueabi.rs
@@ -0,0 +1,25 @@
+use crate::spec::{FloatAbi, Target, TargetOptions, base};
+
+pub(crate) fn target() -> Target {
+    Target {
+        llvm_target: "arm-openwrt-linux-gnueabi".into(),
+        metadata: crate::spec::TargetMetadata {
+            description: Some("Armv6 Linux (kernel 3.2, glibc 2.17)".into()),
+            tier: Some(2),
+            host_tools: Some(true),
+            std: Some(true),
+        },
+        pointer_width: 32,
+        data_layout: "e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64".into(),
+        arch: "arm".into(),
+        options: TargetOptions {
+            abi: "eabi".into(),
+            llvm_floatabi: Some(FloatAbi::Soft),
+            features: "+soft-float,+strict-align,+v6".into(),
+            max_atomic_width: Some(64),
+            mcount: "\u{1}__gnu_mcount_nc".into(),
+            llvm_mcount_intrinsic: Some("llvm.arm.gnu.eabi.mcount".into()),
+            ..base::openwrt_linux_gnu::opts()
+        },
+    }
+}
--- /dev/null
+++ b/compiler/rustc_target/src/spec/targets/armv5te_openwrt_linux_gnueabi.rs
@@ -0,0 +1,26 @@
+use crate::spec::{FloatAbi, Target, TargetOptions, base};
+
+pub(crate) fn target() -> Target {
+    Target {
+        llvm_target: "armv5te-openwrt-linux-gnueabi".into(),
+        metadata: crate::spec::TargetMetadata {
+            description: Some("Armv5TE Linux (kernel 4.4, glibc 2.23)".into()),
+            tier: Some(2),
+            host_tools: Some(false),
+            std: Some(true),
+        },
+        pointer_width: 32,
+        data_layout: "e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64".into(),
+        arch: "arm".into(),
+        options: TargetOptions {
+            abi: "eabi".into(),
+            llvm_floatabi: Some(FloatAbi::Soft),
+            features: "+soft-float,+strict-align".into(),
+            // Atomic operations provided by compiler-builtins
+            max_atomic_width: Some(32),
+            mcount: "\u{1}__gnu_mcount_nc".into(),
+            has_thumb_interworking: true,
+            ..base::openwrt_linux_gnu::opts()
+        },
+    }
+}
--- /dev/null
+++ b/compiler/rustc_target/src/spec/targets/armv7_openwrt_linux_gnueabi.rs
@@ -0,0 +1,28 @@
+use crate::spec::{FloatAbi, Target, TargetOptions, base};
+
+// This target is for glibc Linux on ARMv7 without thumb-mode, NEON or
+// hardfloat.
+
+pub(crate) fn target() -> Target {
+    Target {
+        llvm_target: "armv7-openwrt-linux-gnueabi".into(),
+        metadata: crate::spec::TargetMetadata {
+            description: Some("Armv7-A Linux (kernel 4.15, glibc 2.27)".into()),
+            tier: Some(2),
+            host_tools: Some(false),
+            std: Some(true),
+        },
+        pointer_width: 32,
+        data_layout: "e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64".into(),
+        arch: "arm".into(),
+        options: TargetOptions {
+            abi: "eabi".into(),
+            llvm_floatabi: Some(FloatAbi::Soft),
+            features: "+v7,+thumb2,+soft-float,-neon".into(),
+            max_atomic_width: Some(64),
+            mcount: "\u{1}__gnu_mcount_nc".into(),
+            llvm_mcount_intrinsic: Some("llvm.arm.gnu.eabi.mcount".into()),
+            ..base::openwrt_linux_gnu::opts()
+        },
+    }
+}
--- /dev/null
+++ b/compiler/rustc_target/src/spec/targets/i586_openwrt_linux_gnu.rs
@@ -0,0 +1,9 @@
+use crate::spec::Target;
+
+pub(crate) fn target() -> Target {
+    let mut base = super::i686_openwrt_linux_gnu::target();
+    base.rustc_abi = None; // overwrite the SSE2 ABI set by the base target
+    base.cpu = "pentium".into();
+    base.llvm_target = "i586-openwrt-linux-gnu".into();
+    base
+}
--- /dev/null
+++ b/compiler/rustc_target/src/spec/targets/i686_openwrt_linux_gnu.rs
@@ -0,0 +1,38 @@
+use crate::spec::{Cc, LinkerFlavor, Lld, RustcAbi, SanitizerSet, StackProbeType, Target, base};
+
+pub(crate) fn target() -> Target {
+    let mut base = base::openwrt_linux_gnu::opts();
+    base.rustc_abi = Some(RustcAbi::X86Sse2);
+    // Dear distribution packager, if you are changing the base CPU model with the goal of removing
+    // the SSE2 requirement, make sure to also set the `rustc_abi` to `None` above or else the compiler
+    // will complain that the chosen ABI cannot be realized with the given CPU features.
+    // Also note that x86 without SSE2 is *not* considered a Tier 1 target by the Rust project, and
+    // it has some known floating-point correctness issues mostly caused by a lack of people caring
+    // for LLVM's x87 support (double-rounding, value truncation; see
+    // <https://github.com/rust-lang/rust/issues/114479> for details). This can lead to incorrect
+    // math (Rust generally promises exact math, so this can break code in unexpected ways) and it
+    // can lead to memory safety violations if floating-point values are used e.g. to access an
+    // array. If users run into such issues and report bugs upstream and then it turns out that the
+    // bugs are caused by distribution patches, that leads to confusion and frustration.
+    base.cpu = "pentium4".into();
+    base.max_atomic_width = Some(64);
+    base.supported_sanitizers = SanitizerSet::ADDRESS;
+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &["-m32"]);
+    base.stack_probes = StackProbeType::Inline;
+
+    Target {
+        llvm_target: "i686-openwrt-linux-gnu".into(),
+        metadata: crate::spec::TargetMetadata {
+            description: Some("32-bit Linux (kernel 3.2, glibc 2.17+)".into()),
+            tier: Some(1),
+            host_tools: Some(true),
+            std: Some(true),
+        },
+        pointer_width: 32,
+        data_layout: "e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-\
+            i128:128-f64:32:64-f80:32-n8:16:32-S128"
+            .into(),
+        arch: "x86".into(),
+        options: base,
+    }
+}
--- /dev/null
+++ b/compiler/rustc_target/src/spec/targets/mips_openwrt_linux_gnu.rs
@@ -0,0 +1,27 @@
+use rustc_abi::Endian;
+
+use crate::spec::{Target, TargetOptions, base};
+
+pub(crate) fn target() -> Target {
+    Target {
+        llvm_target: "mips-openwrt-linux-gnu".into(),
+        metadata: crate::spec::TargetMetadata {
+            description: Some("MIPS Linux (kernel 4.4, glibc 2.23)".into()),
+            tier: Some(3),
+            host_tools: Some(true),
+            std: Some(true),
+        },
+        pointer_width: 32,
+        data_layout: "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64".into(),
+        arch: "mips".into(),
+        options: TargetOptions {
+            endian: Endian::Big,
+            cpu: "mips32r2".into(),
+            features: "+mips32r2,+soft-float".into(),
+            max_atomic_width: Some(32),
+            mcount: "_mcount".into(),
+
+            ..base::openwrt_linux_gnu::opts()
+        },
+    }
+}
--- /dev/null
+++ b/compiler/rustc_target/src/spec/targets/mips_openwrt_linux_musl.rs
@@ -0,0 +1,23 @@
+use rustc_abi::Endian;
+
+use crate::spec::{Target, TargetOptions, base};
+
+pub(crate) fn target() -> Target {
+    let mut base = base::openwrt_linux_musl::opts();
+    base.cpu = "mips32r2".into();
+    base.features = "+mips32r2,+soft-float".into();
+    base.max_atomic_width = Some(32);
+    Target {
+        llvm_target: "mips-openwrt-linux-musl".into(),
+        metadata: crate::spec::TargetMetadata {
+            description: Some("MIPS Linux with musl 1.2.3".into()),
+            tier: Some(3),
+            host_tools: Some(false),
+            std: Some(true),
+        },
+        pointer_width: 32,
+        data_layout: "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64".into(),
+        arch: "mips".into(),
+        options: TargetOptions { endian: Endian::Big, mcount: "_mcount".into(), ..base },
+    }
+}
--- /dev/null
+++ b/compiler/rustc_target/src/spec/targets/mipsel_openwrt_linux_gnu.rs
@@ -0,0 +1,25 @@
+use crate::spec::{Target, TargetOptions, base};
+
+pub(crate) fn target() -> Target {
+    Target {
+        llvm_target: "mipsel-openwrt-linux-gnu".into(),
+        metadata: crate::spec::TargetMetadata {
+            description: Some("MIPS (little endian) Linux (kernel 4.4, glibc 2.23)".into()),
+            tier: Some(3),
+            host_tools: Some(true),
+            std: Some(true),
+        },
+        pointer_width: 32,
+        data_layout: "e-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64".into(),
+        arch: "mips".into(),
+
+        options: TargetOptions {
+            cpu: "mips32r2".into(),
+            features: "+mips32r2,+soft-float".into(),
+            max_atomic_width: Some(32),
+            mcount: "_mcount".into(),
+
+            ..base::openwrt_linux_gnu::opts()
+        },
+    }
+}
--- /dev/null
+++ b/compiler/rustc_target/src/spec/targets/mipsel_openwrt_linux_musl.rs
@@ -0,0 +1,21 @@
+use crate::spec::{Target, TargetOptions, base};
+
+pub(crate) fn target() -> Target {
+    let mut base = base::openwrt_linux_musl::opts();
+    base.cpu = "mips32r2".into();
+    base.features = "+mips32r2,+soft-float".into();
+    base.max_atomic_width = Some(32);
+    Target {
+        llvm_target: "mipsel-openwrt-linux-musl".into(),
+        metadata: crate::spec::TargetMetadata {
+            description: Some("MIPS (little endian) Linux with musl 1.2.3".into()),
+            tier: Some(3),
+            host_tools: Some(false),
+            std: Some(true),
+        },
+        pointer_width: 32,
+        data_layout: "e-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64".into(),
+        arch: "mips".into(),
+        options: TargetOptions { mcount: "_mcount".into(), ..base },
+    }
+}
--- /dev/null
+++ b/compiler/rustc_target/src/spec/targets/x86_64_openwrt_linux_gnu.rs
@@ -0,0 +1,42 @@
+use crate::spec::{Cc, LinkerFlavor, Lld, SanitizerSet, StackProbeType, Target, base};
+
+pub(crate) fn target() -> Target {
+    let mut base = base::openwrt_linux_gnu::opts();
+    base.cpu = "x86-64".into();
+    base.plt_by_default = false;
+    base.max_atomic_width = Some(64);
+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &["-m64"]);
+    base.stack_probes = StackProbeType::Inline;
+    base.static_position_independent_executables = false;
+    base.supported_sanitizers = SanitizerSet::ADDRESS
+        | SanitizerSet::CFI
+        | SanitizerSet::KCFI
+        | SanitizerSet::DATAFLOW
+        | SanitizerSet::LEAK
+        | SanitizerSet::MEMORY
+        | SanitizerSet::SAFESTACK
+        | SanitizerSet::THREAD;
+    base.supports_xray = true;
+
+    // When we're asked to use the `rust-lld` linker by default, set the appropriate lld-using
+    // linker flavor, and self-contained linker component.
+    if option_env!("CFG_USE_SELF_CONTAINED_LINKER").is_some() {
+        base.linker_flavor = LinkerFlavor::Gnu(Cc::Yes, Lld::Yes);
+        base.link_self_contained = crate::spec::LinkSelfContainedDefault::with_linker();
+    }
+
+    Target {
+        llvm_target: "x86_64-openwrt-linux-gnu".into(),
+        metadata: crate::spec::TargetMetadata {
+            description: Some("64-bit Linux (kernel 3.2+, glibc 2.17+)".into()),
+            tier: Some(1),
+            host_tools: Some(true),
+            std: Some(true),
+        },
+        pointer_width: 64,
+        data_layout:
+            "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128".into(),
+        arch: "x86_64".into(),
+        options: base,
+    }
+}
--- a/compiler/rustc_target/src/spec/mod.rs
+++ b/compiler/rustc_target/src/spec/mod.rs
@@ -1672,6 +1672,21 @@ macro_rules! supported_targets {
 }
 
 supported_targets! {
+    // Entware/OpenWrt
+    ("aarch64-openwrt-linux-gnu", aarch64_openwrt_linux_gnu),
+    ("arm-openwrt-linux-gnueabi", arm_openwrt_linux_gnueabi),
+    ("armv5te-openwrt-linux-gnueabi", armv5te_openwrt_linux_gnueabi),
+    ("armv7-openwrt-linux-gnueabi", armv7_openwrt_linux_gnueabi),
+    ("i586-openwrt-linux-gnu", i586_openwrt_linux_gnu),
+    ("i686-openwrt-linux-gnu", i686_openwrt_linux_gnu),
+    ("mips-openwrt-linux-gnu", mips_openwrt_linux_gnu),
+    ("mipsel-openwrt-linux-gnu", mipsel_openwrt_linux_gnu),
+    ("x86_64-openwrt-linux-gnu", x86_64_openwrt_linux_gnu),
+    // add *-openwrt-linux-musl
+    ("aarch64-openwrt-linux-musl", aarch64_openwrt_linux_musl),
+    ("mips-openwrt-linux-musl", mips_openwrt_linux_musl),
+    ("mipsel-openwrt-linux-musl", mipsel_openwrt_linux_musl),
+    //
     ("x86_64-unknown-linux-gnu", x86_64_unknown_linux_gnu),
     ("x86_64-unknown-linux-gnux32", x86_64_unknown_linux_gnux32),
     ("i686-unknown-linux-gnu", i686_unknown_linux_gnu),
--- a/src/tools/build-manifest/src/main.rs
+++ b/src/tools/build-manifest/src/main.rs
@@ -51,6 +51,20 @@ static HOSTS: &[&str] = &[
 ];
 
 static TARGETS: &[&str] = &[
+    // Entware/OpenWrt
+    "aarch64-openwrt-linux-gnu",
+    "aarch64-openwrt-linux-musl",
+    "arm-openwrt-linux-gnueabi",
+    "armv5te-openwrt-linux-gnueabi",
+    "armv7-openwrt-linux-gnueabi",
+    "i586-openwrt-linux-gnu",
+    "i686-openwrt-linux-gnu",
+    "mips-openwrt-linux-gnu",
+    "mips-openwrt-linux-musl",
+    "mipsel-openwrt-linux-gnu",
+    "mipsel-openwrt-linux-musl",
+    "x86_64-openwrt-linux-gnu",
+    //
     "aarch64-apple-darwin",
     "aarch64-apple-ios",
     "aarch64-apple-ios-macabi",
--- a/vendor/target-lexicon-0.13.1/src/targets.rs
+++ b/vendor/target-lexicon-0.13.1/src/targets.rs
@@ -585,6 +585,7 @@ pub enum Vendor {
     Kmc,
     Nintendo,
     Nvidia,
+    OpenWrt,
     Pc,
     Rumprun,
     Sun,
@@ -617,6 +618,7 @@ impl Vendor {
             Kmc => "kmc",
             Nintendo => "nintendo",
             Nvidia => "nvidia",
+            OpenWrt => "openwrt",
             Pc => "pc",
             Rumprun => "rumprun",
             Sun => "sun",
@@ -1386,6 +1388,7 @@ impl FromStr for Vendor {
             "kmc" => Kmc,
             "nintendo" => Nintendo,
             "nvidia" => Nvidia,
+            "openwrt" => OpenWrt,
             "pc" => Pc,
             "rumprun" => Rumprun,
             "sun" => Sun,
@@ -1662,6 +1665,20 @@ mod tests {
         //  - targets emitted by "rustc +nightly --print target-list"
         //  - targets contributors have added
         let targets = [
+            // Entware/OpenWrt
+            "aarch64-openwrt-linux-gnu",
+            "aarch64-openwrt-linux-musl",
+            "arm-openwrt-linux-gnueabi",
+            "armv5te-openwrt-linux-gnueabi",
+            "armv7-openwrt-linux-gnueabi",
+            "i586-openwrt-linux-gnu",
+            "i686-openwrt-linux-gnu",
+            "mips-openwrt-linux-gnu",
+            "mips-openwrt-linux-musl",
+            "mipsel-openwrt-linux-gnu",
+            "mipsel-openwrt-linux-musl",
+            "x86_64-openwrt-linux-gnu",
+            //
             "aarch64-apple-darwin",
             "aarch64-apple-ios",
             "aarch64-apple-ios-macabi",
