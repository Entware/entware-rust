--- a/crates/tor-circmgr/src/isolation.rs
+++ b/crates/tor-circmgr/src/isolation.rs
@@ -1,7 +1,7 @@
 //! Types related to stream isolation
 use downcast_rs::{impl_downcast, Downcast};
 use dyn_clone::{clone_trait_object, DynClone};
-use std::sync::atomic::{AtomicU64, Ordering};
+use std::sync::atomic::{AtomicUsize, Ordering};
 
 /// A type that can make isolation decisions about streams it is attached to.
 ///
@@ -179,10 +179,10 @@ impl IsolationToken {
     /// no longer possible to ensure isolation.
     pub fn new() -> Self {
         /// Internal counter used to generate different tokens each time
-        static COUNTER: AtomicU64 = AtomicU64::new(1);
+        static COUNTER: AtomicUsize = AtomicUsize::new(1);
         // Ordering::Relaxed is fine because we don't care about causality, we just want a
         // different number each time
-        let token = COUNTER.fetch_add(1, Ordering::Relaxed);
+        let token = COUNTER.fetch_add(1, Ordering::Relaxed) as u64;
         assert!(token < u64::MAX);
         IsolationToken(token)
     }
--- a/crates/tor-chanmgr/src/mgr/state.rs
+++ b/crates/tor-chanmgr/src/mgr/state.rs
@@ -8,7 +8,7 @@ use crate::{ChannelConfig, Dormancy, Err
 
 use futures::FutureExt;
 use std::result::Result as StdResult;
-use std::sync::atomic::{AtomicU64, Ordering};
+use std::sync::atomic::{AtomicUsize, Ordering};
 use std::sync::Arc;
 use tor_async_utils::oneshot;
 use tor_basic_utils::RngExt as _;
@@ -112,12 +112,12 @@ impl UniqPendingChanId {
     /// Construct a new `UniqPendingChanId`.
     pub(crate) fn new() -> Self {
         /// The next unique ID.
-        static NEXT_ID: AtomicU64 = AtomicU64::new(0);
+        static NEXT_ID: AtomicUsize = AtomicUsize::new(0);
         // Relaxed ordering is fine; we don't care about how this
         // is instantiated with respect to other channels.
         let id = NEXT_ID.fetch_add(1, Ordering::Relaxed);
-        assert!(id != u64::MAX, "Exhausted the pending channel ID namespace");
-        Self(id)
+        assert!(id != usize::MAX, "Exhausted the pending channel ID namespace");
+        Self(id.try_into().unwrap())
     }
 }
 
--- a/crates/tor-guardmgr/src/pending.rs
+++ b/crates/tor-guardmgr/src/pending.rs
@@ -15,7 +15,7 @@ use oneshot_fused_workaround as oneshot;
 use pin_project::pin_project;
 use std::fmt::Debug;
 use std::pin::Pin;
-use std::sync::atomic::{AtomicU64, Ordering};
+use std::sync::atomic::{AtomicUsize, Ordering};
 use std::task::{Context, Poll};
 use std::time::Instant;
 use tor_proto::ClockSkew;
@@ -258,8 +258,8 @@ impl RequestId {
     /// Panics if we have somehow exhausted a 64-bit space of request IDs.
     pub(crate) fn next() -> RequestId {
         /// The next identifier in sequence we'll give out.
-        static NEXT_VAL: AtomicU64 = AtomicU64::new(1);
-        let id = NEXT_VAL.fetch_add(1, Ordering::Relaxed);
+        static NEXT_VAL: AtomicUsize = AtomicUsize::new(1);
+        let id = NEXT_VAL.fetch_add(1, Ordering::Relaxed) as u64;
         assert!(id != 0, "Exhausted guard request Id space.");
         RequestId { id }
     }
--- a/crates/tor-proto/src/util/ts.rs
+++ b/crates/tor-proto/src/util/ts.rs
@@ -1,7 +1,7 @@
 //! Implement a fast 'timestamp' for determining when an event last
 //! happened.
 
-use std::sync::atomic::{AtomicU64, Ordering};
+use std::sync::atomic::{AtomicUsize, Ordering};
 
 /// An object for determining whether an event happened,
 /// and if yes, when it happened.
@@ -18,13 +18,13 @@ pub(crate) struct AtomicOptTimestamp {
     ///
     /// I'd rather just use [`coarsetime::Instant`], but that doesn't have
     /// an atomic form.
-    latest: AtomicU64,
+    latest: AtomicUsize,
 }
 impl AtomicOptTimestamp {
     /// Construct a new timestamp that has never been updated.
     pub(crate) const fn new() -> Self {
         AtomicOptTimestamp {
-            latest: AtomicU64::new(0),
+            latest: AtomicUsize::new(0),
         }
     }
 
@@ -42,7 +42,7 @@ impl AtomicOptTimestamp {
 
         let _ignore = self
             .latest
-            .compare_exchange(0, now, Ordering::Relaxed, Ordering::Relaxed);
+            .compare_exchange(0, now.try_into().unwrap(), Ordering::Relaxed, Ordering::Relaxed);
     }
 
     /// Clear the timestamp and make it not updated again.
@@ -67,7 +67,7 @@ impl AtomicOptTimestamp {
         &self,
         now: coarsetime::Instant,
     ) -> Option<coarsetime::Duration> {
-        let earlier = self.latest.load(Ordering::Relaxed);
+        let earlier = self.latest.load(Ordering::Relaxed) as u64;
         let now = now.as_ticks();
         if now >= earlier && earlier != 0 {
             Some(coarsetime::Duration::from_ticks(now - earlier))
@@ -79,7 +79,7 @@ impl AtomicOptTimestamp {
     /// Update this timestamp to (at least) the time `now`.
     #[inline]
     pub(crate) fn update_to(&self, now: coarsetime::Instant) {
-        self.latest.fetch_max(now.as_ticks(), Ordering::Relaxed);
+        self.latest.fetch_max(now.as_ticks().try_into().unwrap(), Ordering::Relaxed);
     }
 }
 
