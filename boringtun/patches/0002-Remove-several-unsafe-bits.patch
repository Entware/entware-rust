From cc198597ba0827b0fc8f4628f1b4d9232cb4805a Mon Sep 17 00:00:00 2001
From: Jeff Hiner <37913568+jeff-hiner@users.noreply.github.com>
Date: Mon, 14 Feb 2022 20:01:44 -0700
Subject: [PATCH 02/12] Remove several unsafe bits

---
 Cargo.lock                           | 34 ++++++++++++++++++++++++++++
 Cargo.toml                           |  1 +
 src/crypto/chacha20poly1305/tests.rs | 16 ++++---------
 src/crypto/x25519/mod.rs             | 19 +++-------------
 4 files changed, 42 insertions(+), 28 deletions(-)

diff --git a/Cargo.lock b/Cargo.lock
index 4e5c31e..4547285 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -41,6 +41,7 @@ dependencies = [
  "tracing-appender",
  "tracing-subscriber",
  "untrusted 0.9.0",
+ "zeroize",
 ]
 
 [[package]]
@@ -369,6 +370,18 @@ dependencies = [
  "unicode-xid",
 ]
 
+[[package]]
+name = "synstructure"
+version = "0.12.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f36bdaa60a83aca3921b5259d5400cbf5e90fc51931376a9bd4a0eb79aa7210f"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn",
+ "unicode-xid",
+]
+
 [[package]]
 name = "textwrap"
 version = "0.11.0"
@@ -665,3 +678,24 @@ name = "windows_x86_64_msvc"
 version = "0.32.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "504a2476202769977a040c6364301a3f65d0cc9e3fb08600b2bda150a0488316"
+
+[[package]]
+name = "zeroize"
+version = "1.5.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7c88870063c39ee00ec285a2f8d6a966e5b6fb2becc4e8dac77ed0d370ed6006"
+dependencies = [
+ "zeroize_derive",
+]
+
+[[package]]
+name = "zeroize_derive"
+version = "1.3.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "81e8f13fef10b63c06356d65d416b070798ddabcadc10d3ece0c5be9b3c7eddb"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn",
+ "synstructure",
+]
diff --git a/Cargo.toml b/Cargo.toml
index a160435..750149d 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -17,6 +17,7 @@ parking_lot = "0.12"
 tracing = "0.1.29"
 ip_network = "0.4.1"
 ip_network_table = "0.2.0"
+zeroize = { version = "1.5.2", features = ["zeroize_derive"]}
 
 [dependencies.tracing-subscriber]
 version = "0.3"
diff --git a/src/crypto/chacha20poly1305/tests.rs b/src/crypto/chacha20poly1305/tests.rs
index f37454c..af341bf 100644
--- a/src/crypto/chacha20poly1305/tests.rs
+++ b/src/crypto/chacha20poly1305/tests.rs
@@ -21,12 +21,8 @@ fn chacha20_poly1305_test_vectors() {
         let nonce = hex::decode(v.nonce).unwrap();
         let out = hex::decode(v.out).unwrap();
 
-        let mut ct = Vec::with_capacity(out.len());
-        let mut dec = Vec::with_capacity(pt.len());
-        unsafe {
-            ct.set_len(out.len());
-            dec.set_len(pt.len());
-        }
+        let mut ct = vec![0_u8; out.len()];
+        let mut dec = vec![0_u8; pt.len()];
 
         println!(
             "Test vector #{}, , pt.len():{}, ct.len():{}, aad.len():{}",
@@ -58,12 +54,8 @@ fn xchacha20_poly1305_test_vector() {
         let nonce = hex::decode(v.nonce).unwrap();
         let out = hex::decode(v.out).unwrap();
 
-        let mut ct = Vec::with_capacity(out.len());
-        let mut dec = Vec::with_capacity(pt.len());
-        unsafe {
-            ct.set_len(out.len());
-            dec.set_len(pt.len());
-        }
+        let mut ct = vec![0_u8; out.len()];
+        let mut dec = vec![0_u8; pt.len()];
 
         println!(
             "Test vector #{}, , pt.len():{}, ct.len():{}, aad.len():{}",
diff --git a/src/crypto/x25519/mod.rs b/src/crypto/x25519/mod.rs
index 98624ee..e6287d1 100644
--- a/src/crypto/x25519/mod.rs
+++ b/src/crypto/x25519/mod.rs
@@ -13,6 +13,7 @@ use std::ops::Add;
 use std::ops::Mul;
 use std::ops::Sub;
 use std::str::FromStr;
+use zeroize::{Zeroize, ZeroizeOnDrop};
 
 #[cfg(not(target_arch = "arm"))]
 pub use ring::rand::{SecureRandom, SystemRandom};
@@ -49,7 +50,7 @@ pub mod SystemRandom {
 }
 
 #[repr(C)]
-#[derive(Debug)]
+#[derive(Debug, Zeroize, ZeroizeOnDrop)]
 /// A secret X25519 key.
 pub struct X25519SecretKey {
     internal: [u8; 32],
@@ -124,15 +125,8 @@ impl FromStr for X25519SecretKey {
     }
 }
 
-impl Drop for X25519SecretKey {
-    fn drop(&mut self) {
-        // Force zero out of the memory on Drop
-        unsafe { std::ptr::write_volatile(&mut self.internal, [0u8; 32]) }
-    }
-}
-
 #[repr(C)]
-#[derive(Debug, PartialEq, Eq, Hash)]
+#[derive(Debug, PartialEq, Eq, Hash, Zeroize, ZeroizeOnDrop)]
 /// A public X25519, derived from a secret key.
 pub struct X25519PublicKey {
     internal: [u8; 32],
@@ -159,13 +153,6 @@ impl<'a> From<&'a [u8]> for X25519PublicKey {
     }
 }
 
-impl Drop for X25519PublicKey {
-    fn drop(&mut self) {
-        // Force zero out of the memory on Drop
-        unsafe { std::ptr::write_volatile(&mut self.internal, [0u8; 32]) }
-    }
-}
-
 impl FromStr for X25519PublicKey {
     type Err = &'static str;
     fn from_str(s: &str) -> Result<Self, Self::Err> {
-- 
2.30.2

