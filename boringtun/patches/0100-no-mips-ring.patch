--- a/boringtun/Cargo.toml
+++ b/boringtun/Cargo.toml
@@ -18,11 +18,13 @@ tracing = "0.1.29"
 ip_network = "0.4.1"
 ip_network_table = "0.2.0"
 zeroize = { version = "1.5.2", features = ["zeroize_derive"]}
-ring = "0.16"
 
 [dev-dependencies]
 tracing-subscriber = "0.3"
 
+[target.'cfg(not(target_arch="mips"))'.dependencies]
+ring = "0.16"
+
 [target.'cfg(target_os="android")'.dependencies]
 jni = "0.19.0"
 
--- a/boringtun/src/crypto/mod.rs
+++ b/boringtun/src/crypto/mod.rs
@@ -11,4 +11,7 @@ pub use blake2s::{constant_time_mac_chec
 pub use chacha20poly1305::ChaCha20Poly1305;
 pub use x25519::{X25519PublicKey, X25519SecretKey};
 
+#[cfg(not(target_arch="mips"))]
 pub use ring::rand::SystemRandom;
+#[cfg(target_arch="mips")]
+pub use x25519::SystemRandom;
--- a/boringtun/src/crypto/x25519/mod.rs
+++ b/boringtun/src/crypto/x25519/mod.rs
@@ -15,11 +15,40 @@ use std::ops::Sub;
 use std::str::FromStr;
 use zeroize::{Zeroize, ZeroizeOnDrop};
 
+#[cfg(not(target_arch="mips"))]
 pub use ring::rand::{SecureRandom, SystemRandom};
 
 const MASK_63BITS: u128 = 0x7fff_ffff_ffff_ffff;
 const MASK_64BITS: u128 = 0xffff_ffff_ffff_ffff;
 
+#[cfg(target_arch="mips")]
+#[allow(non_snake_case)]
+pub mod SystemRandom {
+    use std::io::Read;
+    use std::sync::Once;
+    static INIT: Once = Once::new();
+
+    static mut URAND: Option<std::fs::File> = None;
+
+    // Workaround for ring not building nicely for arm7
+    pub struct Urandom {}
+
+    pub fn new() -> Urandom {
+        INIT.call_once(|| unsafe {
+            URAND = Some(std::fs::File::open("/dev/urandom").unwrap());
+        });
+
+        Urandom {}
+    }
+
+    impl Urandom {
+        pub fn fill(&self, dest: &mut [u8]) -> Result<(), ()> {
+            let mut local_urand = unsafe { URAND.as_ref().unwrap().try_clone().map_err(|_| ())? };
+            local_urand.read_exact(dest).map(|_| ()).map_err(|_| (()))
+        }
+    }
+}
+
 #[repr(C)]
 #[derive(Debug, Zeroize, ZeroizeOnDrop)]
 /// A secret X25519 key.
--- a/boringtun/src/device/integration_tests/mod.rs
+++ b/boringtun/src/device/integration_tests/mod.rs
@@ -9,7 +9,8 @@ mod tests {
     use crate::device::{DeviceConfig, DeviceHandle};
     use base64::encode as base64encode;
     use hex::encode;
-    use ring::rand::SecureRandom;
+    #[cfg(not(target_arch="mips"))]
+    pub ring::rand::SecureRandom;
     use std::io::{BufRead, BufReader, Read, Write};
     use std::net::{IpAddr, Ipv4Addr, Ipv6Addr, SocketAddr};
     use std::os::unix::net::UnixStream;
--- a/boringtun/src/ffi/benchmark.rs
+++ b/boringtun/src/ffi/benchmark.rs
@@ -3,7 +3,9 @@
 
 /// This module implements benchmarking code for use with the FFI bindings
 use crate::crypto::{Blake2s, ChaCha20Poly1305, X25519SecretKey};
+#[cfg(not(target_arch="mips"))]
 use ring::aead::{Aad, LessSafeKey, Nonce, UnboundKey, CHACHA20_POLY1305};
+#[cfg(not(target_arch="mips"))]
 use ring::{agreement, rand};
 
 use std::time::Instant;
@@ -117,6 +119,7 @@ fn bench_blake2s(name: bool, n: usize) -
     format!("{} MiB/s", format_float(result / (1024. * 1024.)))
 }
 
+#[cfg(not(target_arch="mips"))]
 fn bench_chacha20poly1305_ring(name: bool, n: usize) -> String {
     if name {
         return format!("(Ring) AEAD Seal {}B: ", n);
@@ -157,6 +160,7 @@ fn bench_chacha20poly1305(name: bool, n:
     format!("{} MiB/s", format_float(result / (1024. * 1024.)))
 }
 
+#[cfg(not(target_arch="mips"))]
 fn bench_x25519_shared_key_ring(name: bool, _: usize) -> String {
     if name {
         return "(Ring) X25519 Shared Key: ".to_string();
@@ -190,6 +194,7 @@ fn bench_x25519_shared_key_ring(name: bo
     format!("{} ops/sec", format_float(result))
 }
 
+#[cfg(not(target_arch="mips"))]
 fn bench_x25519_public_key_ring(name: bool, _: usize) -> String {
     if name {
         return "(Ring) X25519 Public Key: ".to_string();
@@ -212,7 +217,9 @@ pub fn do_benchmark(name: bool, idx: usi
     let benchmarks: Vec<(BenchFnc, usize)> = vec![
         (bench_x25519_public_key, 0),
         (bench_x25519_shared_key, 0),
+        #[cfg(not(target_arch="mips"))]
         (bench_x25519_public_key_ring, 0),
+        #[cfg(not(target_arch="mips"))]
         (bench_x25519_shared_key_ring, 0),
         (bench_blake2s, 128),
         (bench_blake2s, 1024),
@@ -220,9 +227,13 @@ pub fn do_benchmark(name: bool, idx: usi
         (bench_chacha20poly1305, 192),
         (bench_chacha20poly1305, 1400),
         (bench_chacha20poly1305, 8192),
+        #[cfg(not(target_arch="mips"))]
         (bench_chacha20poly1305_ring, 128),
+        #[cfg(not(target_arch="mips"))]
         (bench_chacha20poly1305_ring, 192),
+        #[cfg(not(target_arch="mips"))]
         (bench_chacha20poly1305_ring, 1400),
+        #[cfg(not(target_arch="mips"))]
         (bench_chacha20poly1305_ring, 8192),
     ];
 
--- a/boringtun/src/noise/session.rs
+++ b/boringtun/src/noise/session.rs
@@ -2,16 +2,25 @@
 // SPDX-License-Identifier: BSD-3-Clause
 
 use super::PacketData;
+#[cfg(target_arch="mips")]
+use crate::crypto::ChaCha20Poly1305;
 use crate::noise::errors::WireGuardError;
 use parking_lot::Mutex;
+#[cfg(not(target_arch="mips"))]
 use ring::aead::{Aad, LessSafeKey, Nonce, UnboundKey, CHACHA20_POLY1305};
 use std::sync::atomic::{AtomicUsize, Ordering};
 
 pub struct Session {
     pub(crate) receiving_index: u32,
     sending_index: u32,
+    #[cfg(not(target_arch="mips"))]
     receiver: LessSafeKey,
+    #[cfg(not(target_arch="mips"))]
     sender: LessSafeKey,
+    #[cfg(target_arch="mips")]
+    receiver: ChaCha20Poly1305,
+    #[cfg(target_arch="mips")]
+    sender: ChaCha20Poly1305,
     sending_key_counter: AtomicUsize,
     receiving_key_counter: Mutex<ReceivingKeyCounterValidator>,
 }
@@ -154,10 +163,16 @@ impl Session {
         Session {
             receiving_index: local_index,
             sending_index: peer_index,
+            #[cfg(not(target_arch="mips"))]
             receiver: LessSafeKey::new(
                 UnboundKey::new(&CHACHA20_POLY1305, &receiving_key).unwrap(),
             ),
+            #[cfg(not(target_arch="mips"))]
             sender: LessSafeKey::new(UnboundKey::new(&CHACHA20_POLY1305, &sending_key).unwrap()),
+            #[cfg(target_arch="mips")]
+            receiver: ChaCha20Poly1305::new_aead(&receiving_key[..]),
+            #[cfg(target_arch="mips")]
+            sender: ChaCha20Poly1305::new_aead(&sending_key[..]),
             sending_key_counter: AtomicUsize::new(0),
             receiving_key_counter: Mutex::new(Default::default()),
         }
@@ -206,6 +221,7 @@ impl Session {
         counter.copy_from_slice(&sending_key_counter.to_le_bytes());
 
         // TODO: spec requires padding to 16 bytes, but actually works fine without it
+        #[cfg(not(target_arch="mips"))]
         let n = {
             let mut nonce = [0u8; 12];
             nonce[4..12].copy_from_slice(&sending_key_counter.to_le_bytes());
@@ -223,6 +239,14 @@ impl Session {
                 .unwrap()
         };
 
+        #[cfg(target_arch="mips")]
+        let n = self.sender.seal_wg(
+            sending_key_counter,
+            &[],
+            src,
+            &mut data[..src.len() + AEAD_SIZE],
+        );
+
         &mut dst[..DATA_OFFSET + n]
     }
 
@@ -246,6 +270,7 @@ impl Session {
         // Don't reuse counters, in case this is a replay attack we want to quickly check the counter without running expensive decryption
         self.receiving_counter_quick_check(packet.counter)?;
 
+        #[cfg(not(target_arch="mips"))]
         let ret = {
             let mut nonce = [0u8; 12];
             nonce[4..12].copy_from_slice(&packet.counter.to_le_bytes());
@@ -259,6 +284,14 @@ impl Session {
                 .map_err(|_| WireGuardError::InvalidAeadTag)?
         };
 
+        #[cfg(target_arch="mips")]
+        let ret = self.receiver.open_wg(
+            packet.counter,
+            &[],
+            packet.encrypted_encapsulated_packet,
+            dst,
+        )?;
+
         // After decryption is done, check counter again, and mark as received
         self.receiving_counter_mark(packet.counter)?;
         Ok(ret)
