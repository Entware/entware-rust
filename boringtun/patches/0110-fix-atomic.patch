--- a/boringtun/src/noise/rate_limiter.rs
+++ b/boringtun/src/noise/rate_limiter.rs
@@ -5,8 +5,9 @@ use crate::crypto::{
 use crate::noise::handshake::{LABEL_COOKIE, LABEL_MAC1};
 use crate::noise::{HandshakeInit, HandshakeResponse, Packet, Tunn, TunnResult, WireGuardError};
 
+use std::convert::TryInto;
 use std::net::IpAddr;
-use std::sync::atomic::{AtomicU64, Ordering};
+use std::sync::atomic::{AtomicUsize, Ordering};
 use std::time::Instant;
 
 use parking_lot::Mutex;
@@ -31,11 +32,11 @@ pub struct RateLimiter {
     nonce_key: [u8; 32],  // The key we use to derive the nonce
     secret_key: [u8; 16], // The key we use to derive the cookie
     start_time: Instant,
-    nonce_ctr: AtomicU64, // A single 64bit counter should suffice for many years
+    nonce_ctr: AtomicUsize, // A single 64bit counter should suffice for many years
     mac1_key: [u8; 32],
     cookie_key: [u8; 32],
     limit: u64,
-    count: AtomicU64,           // The counter since last reset
+    count: AtomicUsize,         // The counter since last reset
     last_reset: Mutex<Instant>, // The time last reset was performed on this rate limiter
 }
 
@@ -45,7 +46,7 @@ impl RateLimiter {
             nonce_key: RateLimiter::rand_bytes(),
             secret_key: make_array(&RateLimiter::rand_bytes()[..16]),
             start_time: Instant::now(),
-            nonce_ctr: AtomicU64::new(0),
+            nonce_ctr: AtomicUsize::new(0),
             mac1_key: Blake2s::new_hash()
                 .hash(LABEL_MAC1)
                 .hash(public_key.as_bytes())
@@ -55,7 +56,7 @@ impl RateLimiter {
                 .hash(public_key.as_bytes())
                 .finalize(),
             limit,
-            count: AtomicU64::new(0),
+            count: AtomicUsize::new(0),
             last_reset: Mutex::new(Instant::now()),
         }
     }
@@ -115,7 +116,7 @@ impl RateLimiter {
     }
 
     fn is_under_load(&self) -> bool {
-        self.count.fetch_add(1, Ordering::SeqCst) >= self.limit
+        self.count.fetch_add(1, Ordering::SeqCst) >= self.limit.try_into().unwrap()
     }
 
     pub(crate) fn format_cookie_reply<'a>(
