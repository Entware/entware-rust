From bf08be2b0ec42c2ef5138352f19ff6e8da03b2a5 Mon Sep 17 00:00:00 2001
From: Dzenan Jupic <56133904+DzenanJupic@users.noreply.github.com>
Date: Fri, 16 Dec 2022 21:05:16 +0100
Subject: [PATCH 7/8] Fixed all clippy warnings

Signed-off-by: Dzenan Jupic <56133904+DzenanJupic@users.noreply.github.com>
---
 cli/src/args/stream_filter.rs |  2 +-
 cli/src/main.rs               |  6 +++---
 cli/src/output_format.rs      |  4 ++--
 src/descrambler/cipher.rs     | 28 +++++++++++-----------------
 src/fetcher.rs                | 12 ++++++------
 5 files changed, 23 insertions(+), 29 deletions(-)

--- a/cli/src/args/stream_filter.rs
+++ b/cli/src/args/stream_filter.rs
@@ -121,6 +121,6 @@ impl StreamFilter {
 }
 
 fn parse_json<T: for<'de> serde::Deserialize<'de>>(s: &str) -> anyhow::Result<T> {
-    let args = format!("\"{}\"", s);
+    let args = format!("\"{s}\"");
     Ok(serde_json::from_str(&args)?)
 }
--- a/cli/src/main.rs
+++ b/cli/src/main.rs
@@ -53,7 +53,7 @@ async fn check(args: CheckArgs) -> Resul
         .output
         .output_format
         .serialize_output(&video_serializer)?;
-    println!("{}", output);
+    println!("{output}");
 
     Ok(())
 }
@@ -83,7 +83,7 @@ async fn download(args: DownloadArgs) ->
         args.output.output_level,
     );
     let output = args.output.output_format.serialize_output(&video_serializer).unwrap();
-    println!("{}", output);
+    println!("{output}");
 
     Ok(())
 }
@@ -95,7 +95,7 @@ async fn fetch(args: FetchArgs) -> Resul
     let video_info = rustube::VideoFetcher::from_id(id)?.fetch_info().await?;
 
     let output = args.output.output_format.serialize_output(&video_info)?;
-    println!("{}", output);
+    println!("{output}");
 
     Ok(())
 }
--- a/cli/src/output_format.rs
+++ b/cli/src/output_format.rs
@@ -16,8 +16,8 @@ impl OutputFormat {
         use OutputFormat::*;
 
         match self {
-            Debug => Ok(format!("{:?}", output)),
-            PrettyDebug => Ok(format!("{:#?}", output)),
+            Debug => Ok(format!("{output:?}")),
+            PrettyDebug => Ok(format!("{output:#?}")),
             Json => Ok(serde_json::to_string(output)?),
             PrettyJson => Ok(serde_json::to_string_pretty(output)?),
             Yaml => Ok(serde_yaml::to_string(output)?)
--- a/src/descrambler/cipher.rs
+++ b/src/descrambler/cipher.rs
@@ -1,6 +1,6 @@
 use std::collections::HashMap;
-use once_cell::sync::Lazy;
 
+use once_cell::sync::Lazy;
 use regex::Regex;
 
 use crate::{Error, Result, TryCollect};
@@ -51,7 +51,7 @@ impl Cipher {
             let js_fun = self.transform_map
                 .get(name)
                 .ok_or_else(|| Error::UnexpectedResponse(format!(
-                    "no matching transform function for `{}`", js_fun_name
+                    "no matching transform function for `{js_fun_name}`",
                 ).into()))?
                 .0;
             js_fun(signature, argument);
@@ -93,8 +93,7 @@ impl Cipher {
                 )
             )),
             (name, arg) => Err(Error::UnexpectedResponse(format!(
-                "expected a Javascript transformer function and an argument, got: `{:?}` and `{:?}`",
-                name, arg
+                "expected a Javascript transformer function and an argument, got: `{name:?}` and `{arg:?}`",
             ).into()))
         }
     }
@@ -109,8 +108,8 @@ impl Cipher {
             transform_map: {:?}",
             signature, self.transform_plan, self.transform_map_dbg()
         );
-        log::error!("{}", error);
-        eprintln!("{}", error);
+        log::error!("{error}");
+        eprintln!("{error}");
         error
     }
 
@@ -134,13 +133,12 @@ impl Cipher {
 
 fn get_transform_plan(js: &str) -> Result<Vec<String>> {
     let name = regex::escape(get_initial_function_name(js)?);
-    let pattern = Regex::new(&format!(r#"{}=function\(\w\)\{{[a-z=.(")]*;(.*);(?:.+)}}"#, name)).unwrap();
+    let pattern = Regex::new(&format!(r#"{name}=function\(\w\)\{{[a-z=.(")]*;(.*);(?:.+)}}"#)).unwrap();
     Ok(
         pattern
             .captures(js)
             .ok_or_else(|| Error::UnexpectedResponse(format!(
-                "could not extract the initial JavaScript function: {}",
-                pattern
+                "could not extract the initial JavaScript function: {pattern}",
             ).into()))?
             .get(1)
             .expect("the pattern must contain at least one capture group")
@@ -172,8 +170,7 @@ fn get_initial_function_name(js: &str) -
         .find_map(|pattern| pattern.captures(js))
         .map(|c| c.get(1).unwrap().as_str())
         .ok_or_else(|| Error::UnexpectedResponse(format!(
-            "could not find the JavaScript function name: `{}`",
-            js
+            "could not find the JavaScript function name: `{js}`",
         ).into()))
 }
 
@@ -186,8 +183,7 @@ fn get_transform_map(js: &str, var: &str
         let (name, function) = obj
             .split_once(':')
             .ok_or_else(|| Error::UnexpectedResponse(format!(
-                "expected the transform-object to contain at least one ':', got {}",
-                obj
+                "expected the transform-object to contain at least one ':', got {obj}",
             ).into()))?;
         let fun = map_functions(function)?;
         mapper.insert(name.to_owned(), fun);
@@ -249,8 +245,7 @@ fn map_functions(js_func: &str) -> Resul
         .find(|(pattern, _fun)| pattern.is_match(js_func))
         .map(|(_pattern, fun)| *fun)
         .ok_or_else(|| Error::UnexpectedResponse(format!(
-            "could not map the JavaScript function `{}` to any Rust equivalent",
-            js_func
+            "could not map the JavaScript function `{js_func}` to any Rust equivalent",
         ).into()))
 }
 
@@ -260,8 +255,7 @@ fn get_transform_object(js: &str, var: &
             .unwrap()
             .captures(js)
             .ok_or_else(|| Error::UnexpectedResponse(format!(
-                "could not extract the transform-object `{}`",
-                var
+                "could not extract the transform-object `{var}`",
             ).into()))?
             .get(1)
             .expect("the regex pattern must contain at least one capture group")
--- a/src/fetcher.rs
+++ b/src/fetcher.rs
@@ -1,5 +1,4 @@
 use once_cell::sync::Lazy;
-
 use regex::Regex;
 use reqwest::Client;
 use serde::Deserialize;
@@ -63,7 +62,7 @@ use crate::video_info::player_response::
 ///
 /// [`Video`]: crate::video::Video
 #[derive(Clone, derive_more::Display, derivative::Derivative)]
-#[display(fmt = "VideoFetcher({})", video_id)]
+#[display(fmt = "VideoFetcher({video_id})")]
 #[derivative(Debug, PartialEq, Eq)]
 pub struct VideoFetcher {
     video_id: IdBuf,
@@ -429,7 +428,7 @@ fn js_url(html: &str) -> crate::Result<(
         _ => get_ytplayer_js(html)?
     };
 
-    Ok((Url::parse(&format!("https://youtube.com{}", base_js))?, player_response.ok()))
+    Ok((Url::parse(&format!("https://youtube.com{base_js}"))?, player_response.ok()))
 }
 
 /// Extracts the [`PlayerResponse`] from the watch html.
@@ -511,9 +510,10 @@ fn deserialize_ytplayer_config(json: &st
         Err(err) => err,
     };
 
-    Err(crate::Error::JsonDeserialization(serde::de::Error::custom(format_args!(
-        "data did not match any variant of untagged enum PlayerConfig:\n\tArgs:{}\n\tPlayerResponse:{}",
-        args_err, pr_err,
+    Err(Error::JsonDeserialization(serde::de::Error::custom(format_args!(
+        "data did not match any variant of untagged enum PlayerConfig:\n\
+        \tArgs:{args_err}\n\
+        \tPlayerResponse:{pr_err}",
     ))))
 }
 
