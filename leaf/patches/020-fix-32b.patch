--- a/leaf/src/app/stat_manager.rs
+++ b/leaf/src/app/stat_manager.rs
@@ -1,4 +1,4 @@
-use std::sync::atomic::{AtomicBool, AtomicU64, Ordering};
+use std::sync::atomic::{AtomicBool, AtomicUsize, Ordering};
 use std::sync::Arc;
 use std::{io, pin::Pin};
 
@@ -14,8 +14,8 @@ use crate::{proxy::*, session::*};
 
 pub struct Stream {
     pub inner: AnyStream,
-    pub bytes_recvd: Arc<AtomicU64>,
-    pub bytes_sent: Arc<AtomicU64>,
+    pub bytes_recvd: Arc<AtomicUsize>,
+    pub bytes_sent: Arc<AtomicUsize>,
     pub recv_completed: Arc<AtomicBool>,
     pub send_completed: Arc<AtomicBool>,
 }
@@ -39,7 +39,7 @@ impl AsyncRead for Stream {
             self.recv_completed.store(true, Ordering::Relaxed);
         } else {
             self.bytes_recvd
-                .fetch_add(buf.filled().len() as u64, Ordering::Relaxed);
+                .fetch_add((buf.filled().len() as u64).try_into().unwrap(), Ordering::Relaxed);
         }
         Poll::Ready(Ok(()))
     }
@@ -52,7 +52,7 @@ impl AsyncWrite for Stream {
         buf: &[u8],
     ) -> Poll<io::Result<usize>> {
         let n = ready!(Pin::new(&mut self.inner).poll_write(cx, buf))?;
-        self.bytes_sent.fetch_add(n as u64, Ordering::Relaxed);
+        self.bytes_sent.fetch_add((n as u64).try_into().unwrap(), Ordering::Relaxed);
         Poll::Ready(Ok(n))
     }
 
@@ -69,8 +69,8 @@ impl AsyncWrite for Stream {
 
 pub struct Datagram {
     pub inner: AnyOutboundDatagram,
-    pub bytes_recvd: Arc<AtomicU64>,
-    pub bytes_sent: Arc<AtomicU64>,
+    pub bytes_recvd: Arc<AtomicUsize>,
+    pub bytes_sent: Arc<AtomicUsize>,
     pub recv_completed: Arc<AtomicBool>,
     pub send_completed: Arc<AtomicBool>,
 }
@@ -92,7 +92,7 @@ impl OutboundDatagram for Datagram {
 
 pub struct DatagramRecvHalf(
     Box<dyn OutboundDatagramRecvHalf>,
-    Arc<AtomicU64>,
+    Arc<AtomicUsize>,
     Arc<AtomicBool>,
 );
 
@@ -106,7 +106,7 @@ impl Drop for DatagramRecvHalf {
 impl OutboundDatagramRecvHalf for DatagramRecvHalf {
     async fn recv_from(&mut self, buf: &mut [u8]) -> io::Result<(usize, SocksAddr)> {
         self.0.recv_from(buf).await.map(|(n, a)| {
-            self.1.fetch_add(n as u64, Ordering::Relaxed);
+            self.1.fetch_add((n as u64).try_into().unwrap(), Ordering::Relaxed);
             (n, a)
         })
     }
@@ -114,7 +114,7 @@ impl OutboundDatagramRecvHalf for Datagr
 
 pub struct DatagramSendHalf(
     Box<dyn OutboundDatagramSendHalf>,
-    Arc<AtomicU64>,
+    Arc<AtomicUsize>,
     Arc<AtomicBool>,
 );
 
@@ -128,7 +128,7 @@ impl Drop for DatagramSendHalf {
 impl OutboundDatagramSendHalf for DatagramSendHalf {
     async fn send_to(&mut self, buf: &[u8], target: &SocksAddr) -> io::Result<usize> {
         self.0.send_to(buf, target).await.map(|n| {
-            self.1.fetch_add(n as u64, Ordering::Relaxed);
+            self.1.fetch_add((n as u64).try_into().unwrap(), Ordering::Relaxed);
             n
         })
     }
@@ -140,19 +140,19 @@ impl OutboundDatagramSendHalf for Datagr
 
 pub struct Counter {
     pub sess: Session,
-    pub bytes_recvd: Arc<AtomicU64>,
-    pub bytes_sent: Arc<AtomicU64>,
+    pub bytes_recvd: Arc<AtomicUsize>,
+    pub bytes_sent: Arc<AtomicUsize>,
     pub recv_completed: Arc<AtomicBool>,
     pub send_completed: Arc<AtomicBool>,
 }
 
 impl Counter {
     pub fn bytes_recvd(&self) -> u64 {
-        self.bytes_recvd.load(Ordering::Relaxed)
+        self.bytes_recvd.load(Ordering::Relaxed).try_into().unwrap()
     }
 
     pub fn bytes_sent(&self) -> u64 {
-        self.bytes_sent.load(Ordering::Relaxed)
+        self.bytes_sent.load(Ordering::Relaxed).try_into().unwrap()
     }
 
     pub fn recv_completed(&self) -> bool {
@@ -210,8 +210,8 @@ impl StatManager {
     }
 
     pub fn stat_stream(&mut self, stream: AnyStream, sess: Session) -> AnyStream {
-        let bytes_recvd = Arc::new(AtomicU64::new(0));
-        let bytes_sent = Arc::new(AtomicU64::new(0));
+        let bytes_recvd = Arc::new(AtomicUsize::new(0));
+        let bytes_sent = Arc::new(AtomicUsize::new(0));
         let recv_completed = Arc::new(AtomicBool::new(false));
         let send_completed = Arc::new(AtomicBool::new(false));
         self.counters.push(Counter {
@@ -235,8 +235,8 @@ impl StatManager {
         dgram: AnyOutboundDatagram,
         sess: Session,
     ) -> AnyOutboundDatagram {
-        let bytes_recvd = Arc::new(AtomicU64::new(0));
-        let bytes_sent = Arc::new(AtomicU64::new(0));
+        let bytes_recvd = Arc::new(AtomicUsize::new(0));
+        let bytes_sent = Arc::new(AtomicUsize::new(0));
         let recv_completed = Arc::new(AtomicBool::new(false));
         let send_completed = Arc::new(AtomicBool::new(false));
         self.counters.push(Counter {
